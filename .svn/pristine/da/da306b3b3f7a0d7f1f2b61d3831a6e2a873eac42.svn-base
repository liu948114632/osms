/*
 * Copyright (c) 2018. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
 * Morbi non lorem porttitor neque feugiat blandit. Ut vitae ipsum eget quam lacinia accumsan.
 * Etiam sed turpis ac ipsum condimentum fringilla. Maecenas magna.
 * Proin dapibus sapien vel ante. Aliquam erat volutpat. Pellentesque sagittis ligula eget metus.
 * Vestibulum commodo. Ut rhoncus gravida arcu.
 */

package com.itecheasy.core.task;

import com.itecheasy.common.util.BeanUtils;
import com.itecheasy.common.util.CollectionUtils;
import com.itecheasy.common.util.DeployProperties;
import com.itecheasy.core.fba.AmazonReportService;
import com.itecheasy.core.po.ShopPo;
import com.itecheasy.core.system.Shop;
import com.itecheasy.core.system.SystemService;
import com.itecheasy.core.system.dao.ShopDao;
import org.apache.log4j.Logger;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * @Auther: liteng
 * @Date: 2018/8/10 16:00
 * @Description:
 */
public class SyncAmazonAgedItemReportTaskImpl implements SyncAmazonAgedItemReportTask {

    private static Logger logger = Logger.getLogger(SyncAmozonStackReportTaskImpl.class.getName());

    private ShopDao shopDao;

    private SystemService systemService;

    private AmazonReportService amazonReportService;

    //用于多线程访问的shopList,当enableShops中没有了元素，今天就不会再跑了
    private List<Shop> enableShops;

    //0今天的还没有走，1今天的任务已经做完了
    private int lastOneFlag= 0 ;

    public void setSystemService(SystemService systemService) {
        this.systemService = systemService;
    }

    public void setAmazonReportService(AmazonReportService amazonReportService) {
        this.amazonReportService = amazonReportService;
    }

    public void setShopDao(ShopDao shopDao) {
        this.shopDao = shopDao;
    }

    public  void initShopList(){
        logger.info("初始化要获取亚马逊报告的店铺");
//        enableShops = shopDao.getEnableShops();
//        for (Iterator<Shop> it=enableShops.iterator();it.hasNext();) {
//            Shop sp = it.next();
//            boolean isAmazonShop = sp.getName().startsWith("Amazon");
//            if (!isAmazonShop){
//                it.remove();
//            }
//        }
        String amazonAgedItem = DeployProperties.getInstance().getProperty("sync.amazon.aged.item");
        String[] shopIds = amazonAgedItem.split(",");

        List<Shop> shopList = new ArrayList<Shop>();
        for (String shopId : shopIds) {
            ShopPo shopPo = shopDao.getObject(Integer.valueOf(shopId));
            Shop shop = BeanUtils.copyProperties(shopPo, Shop.class);
            shopList.add(shop);
        }
        enableShops = shopList;
    }


    //每10秒执行一次 支持并发
    @Override
    public void syncAmazonAgedItemReport() {
        String reportType = "_GET_FBA_INVENTORY_AGED_DATA_";
//        String reportType = "_GET_FBA_MYI_UNSUPPRESSED_INVENTORY_DATA_";
        logger.info("开始调用中间服务来获取亚马逊商品库龄报告");
        //init shopList every day
        if(enableShops == null && lastOneFlag == 0){    //第一次时执行,今天的跑完了之后就把flag改为1，就不会再初始化了店铺了
            initShopList();
        }
        //访问亚马逊 全部
        if (enableShops!=null && enableShops.size()>0) {
            Shop enableShop = enableShops.get(0);
            enableShops.remove(0);

            try {
                logger.error("以下店铺将开始请求亚马逊"+enableShop.getId());
                amazonReportService.syncAmazonAgedItemReport(enableShop, reportType);
                logger.error("以下店铺请求亚马逊获取报告完成"+enableShop.getId());
            } catch (ParseException e) {
                logger.error("date convert error 时间转换错误,请在配置文件deploy_config.properties中重新配置正确的时间格式 “yyyy-MM-dd HH:mm:ss” ");
                logger.error(e.getMessage(), e);
            } catch (IOException e) {
                logger.error("json 格式转换错误");
                logger.error(e.getMessage(), e);
            } catch (Exception e) {
                logger.error(e.getMessage(), e);
            }

            //分组，分局中间服务器的地址
//            for(Iterator<Shop> it = enableShops.iterator(); it.hasNext();){
//                Shop sp = it.next();
//                if(sp.getShopDevInfoId().equals(shop.getShopDevInfoId())){
//                    shopList.add(sp);
//                    it.remove();
//                }
//            }

            //拿完之后删除掉刚刚拿到的那个
            //今天的已经跑完了   停止的条件
            if(enableShops.size() == 0){
                lastOneFlag = 1;
                logger.info("完成调用中间服务获取亚马逊商品库龄报告");
            }
        }
    }

    /**
     * 用于重置lastOneFlag,就是判断今天是否已经跑过了一次亚马逊
     */
    public void resetEverydaySync() {
        if (enableShops != null && enableShops.size()==0 && lastOneFlag == 1) {
            //第二次和以后的重置，单独的自动任务来初始化店铺
            initShopList();
            logger.error("已经重置lastOneFlag，开始获取今天新的亚马逊商品库龄报告");

            //其他的异常情况
        }else if(enableShops!=null && lastOneFlag != 1){
            logger.error("初始化错误，今天不能初始化并且访问亚马逊来获取亚马逊商品库龄报告，可能是昨天或者更早的报告没有获取完成");
        }else{
            logger.error("未知错误,不能初始化亚马逊商品库龄报告自动任务");
        }
    }

}
