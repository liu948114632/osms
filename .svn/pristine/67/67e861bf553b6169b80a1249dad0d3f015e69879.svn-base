package com.itecheasy.core.task;

import com.itecheasy.common.util.DateUtils;
import com.itecheasy.common.util.DeployProperties;
import com.itecheasy.core.fba.FbaInboundService;
import com.itecheasy.core.fba.PutTransportContentVO;
import com.itecheasy.core.fba.dao.ReplenishmentOrderDao;
import com.itecheasy.core.order.OrderService;
import com.itecheasy.core.order.OrderService.OrderAmazonStatus;
import com.itecheasy.core.order.dao.OrderTrackingDao;
import com.itecheasy.core.po.OrderTrackingPO;
import com.itecheasy.core.po.ReplenishmentOrderPO;
import com.itecheasy.core.system.Shop;
import com.itecheasy.core.system.SystemService;
import com.itecheasy.webservice.amazon.AmazonShipmentStatusListVO;
import com.itecheasy.webservice.amazon.ListInboundShipmentsResultVO;
import org.apache.log4j.Logger;
import org.codehaus.jackson.map.ObjectMapper;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * @Auther: liteng
 * @Date: 2018/6/28 08:57
 * @Description:
 */
public class AmozonUpdateReplenishmentShipmentImpl implements AmozonUpdateReplenishmentShipment {


    public static final int  automaton = -3;

    public static final ObjectMapper MAPPER = new ObjectMapper();

    private static final Logger LOGGER = Logger.getLogger(AmozonUpdateReplenishmentShipmentImpl.class);

    private ReplenishmentOrderDao replenishmentOrderDao;

    private OrderTrackingDao orderTrackingDao;

    private SystemService systemService;

    public void setSystemService(SystemService systemService) {
        this.systemService = systemService;
    }

    public void setOrderTrackingDao(OrderTrackingDao orderTrackingDao) {
        this.orderTrackingDao = orderTrackingDao;
    }

    private FbaInboundService fbaInboundService;


    public void setReplenishmentOrderDao(ReplenishmentOrderDao replenishmentOrderDao) {
        this.replenishmentOrderDao = replenishmentOrderDao;
    }

    public void setFbaInboundService(FbaInboundService fbaInboundService) {
        this.fbaInboundService = fbaInboundService;
    }

    @Override
    public void autoUploadOrderCode() {
        LOGGER.info("start同步订单跟踪号到亚马逊");
//        Date beginDate = java.sql.Date.valueOf("2018-05-01");
        Date beginDate = DateUtils.convertDate("2018-05-01");
        //查出所有的订单，并且状态是已发货的
        List<ReplenishmentOrderPO> replenishmentOrderPOS = replenishmentOrderDao.findListByHql
                ("FROM ReplenishmentOrderPO WHERE status=? AND deliveryDate>=? ",
                        new Object[]{OrderService.OrderStatus.已发货.getVal(),beginDate});

        //跟踪单号如果为空就不执行提交亚马逊，如果不为空就提交给亚马逊   ,选择一个时间，这个时间以后的执行
        for (ReplenishmentOrderPO replenishmentOrderPO : replenishmentOrderPOS) {
            //每个补货订单下可能有多个跟踪订单
            List<OrderTrackingPO> orderTrackingPOS = orderTrackingDao.
                    findListByHql("FROM OrderTrackingPO WHERE orderCode=? ",new Object[]{replenishmentOrderPO.getCode()});
            if (orderTrackingPOS!=null && orderTrackingPOS.size()>0) {
                PutTransportContentVO putTransportContentVO = new PutTransportContentVO();
                putTransportContentVO.setShipmentId(replenishmentOrderPO.getShipmentID());
                putTransportContentVO.setOperatorId(automaton); //自动任务小于零,用于不记录日志
                putTransportContentVO.setOrderTrackCode(orderTrackingPOS.get(0).getCode());
                putTransportContentVO.setShopId(replenishmentOrderPO.getShopId());
                putTransportContentVO.setReplenishmentOrderCode(replenishmentOrderPO.getCode());

                String transportStatus = fbaInboundService.putTransportContent(putTransportContentVO);

//                if (transportStatus==null){
//                    throw new BussinessException("更新货运单号至亚马逊失败,补货订单编号:"+replenishmentOrderPO.getCode());
//                }
                //更新亚马逊货件状态为已发货
            }
        }
        //判断条件之后再来更新


        LOGGER.info("end同步订单跟踪号到亚马逊");
    }

   

    @Override
    public void autoSyncInboundShipments() {
        LOGGER.info("start同步FBA补货订单状态到osms");
        //查出所有的订单，并且状态是已发货的
        String date =  DeployProperties.getInstance().getProperty("test.amazon.sync.orderStatus.date","2018-05-01");
        Date beginDate =null;
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        try {
            beginDate = format.parse(date.trim());
        } catch (ParseException e) {
            e.printStackTrace();
            LOGGER.error(e.getMessage(),e);
        }

        //获取合法的这些店铺
        List<Shop> notPauseAndEnableShops = systemService.getNotPauseAndEnableShops();
        StringBuilder builder = new StringBuilder();
        for (Shop notPauseAndEnableShop : notPauseAndEnableShops) {
            builder.append(notPauseAndEnableShop.getId()).append(",");
        }
        String substring = builder.substring(0, builder.length() - 1);

//        LOGGER.info("以下这些合法店铺的ID同步FBA补货订单状态到osms{" + substring +"}");

        //增加一个条件 某个时间开始的订单          latest_shipping_date>='2018-5-1'
        List<ReplenishmentOrderPO> replenishmentOrderPOS = replenishmentOrderDao.findListByHql
                ("FROM ReplenishmentOrderPO WHERE status=? AND addOrderDate>=? AND orderAmazonStatus NOT IN(?,?) AND shopId in("+ substring +")",
                        new Object[]{OrderService.OrderStatus.已发货.getVal(),beginDate,OrderAmazonStatus.CLOSED.getStatusCode(),OrderAmazonStatus.CANCELLED.getStatusCode()});
        //遍历把所有的已发货状态的商品的shipmentId传给亚马逊 返回的状态写入到数据库

        //分类ids //根据shopId进行分类
        Map<Integer, List<String>> map = new HashMap<Integer, List<String>>();
        for (ReplenishmentOrderPO replenishmentOrderPO : replenishmentOrderPOS) {
            if(!map.containsKey(replenishmentOrderPO.getShopId())){
                map.put(replenishmentOrderPO.getShopId(),new ArrayList<String>());
            }
            List<String> integerList = map.get(replenishmentOrderPO.getShopId());
            integerList.add(replenishmentOrderPO.getShipmentID());
        }

        //不同商店的的订单调用不同的api,这是第一个shopId的

        for (Map.Entry<Integer, List<String>> entry : map.entrySet()) {
            LOGGER.info("开始同步店铺id为"+entry.getKey()+"的以下shipmentId"+entry.getValue());
            AmazonShipmentStatusListVO vo = new AmazonShipmentStatusListVO();
            List<String> shipmentIdList = entry.getValue();
            vo.setShipmentIdList(shipmentIdList);
            Integer shopId = entry.getKey();

            //只需要同步OSMS中FBA补货订单状态是已发货，发货日期是2018-5-1之后的订单。
            vo.setStartDate(DateUtils.getXMLGregorianCalendar(beginDate));
            try {
                ListInboundShipmentsResultVO listInboundShipmentsResultVO = fbaInboundService.listInboundShipments(vo, shopId); //ListInboundShipments调用
                String token = null;
                if (listInboundShipmentsResultVO != null) {
                	fbaInboundService.updateAmazonOrderStatus(listInboundShipmentsResultVO, shopId);  //持久化第一次返回的一部分需要更新
                    token = listInboundShipmentsResultVO.getNextToken();
                }

                LOGGER.info("nextToken情况:"+token+",同步店铺id为"+entry.getKey()+"的以下shipmentId"+entry.getValue());

                while (token != null && !"".equalsIgnoreCase(token.trim())) {          //如果是否有nextToken,有的话需要继续调用，直到nextToken为null为止
                    Thread.sleep(1000);
                	ListInboundShipmentsResultVO resultVO = fbaInboundService.listInboundShipmentsByNextToken(token, shopId);
                    if (resultVO != null && resultVO.getInboundShipmentInfoVOList() != null && resultVO.getInboundShipmentInfoVOList().size() > 0) {
                    	fbaInboundService.updateAmazonOrderStatus(resultVO, shopId);  //更新返回剩下的的一部分
                        token = resultVO.getNextToken();
                    } else {
                        token = null;   //clear token
                    }
                }
            }catch (Exception e){
            	LOGGER.error("店铺id为"+entry.getKey()+"的店铺未同步成功");
                LOGGER.error(e.getMessage(),e);
            }
        }
        LOGGER.info("end同步FBA补货订单状态到osms");
    }

}
