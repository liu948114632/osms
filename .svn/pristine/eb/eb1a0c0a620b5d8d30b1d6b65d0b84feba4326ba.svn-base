package com.itecheasy.core.fba.AgedItemReportCalculateUtil;

import com.itecheasy.common.util.BeanUtils;
import com.itecheasy.common.util.CollectionUtils;
import com.itecheasy.common.util.DateUtils;
import com.itecheasy.common.util.HqlUtils;
import com.itecheasy.core.fba.dao.AmazonInventoryAgedReportDao;
import com.itecheasy.core.fba.dao.AmazonInventoryAgedReportHistoryDao;
import com.itecheasy.core.po.AmazonInventoryAgedReportHistoryPO;
import com.itecheasy.core.po.AmazonInventoryAgedReportPO;
import com.itecheasy.core.po.AmazonStockReportPO;
import com.itecheasy.webservice.amazon.AmazonStockReportVO;

import java.math.BigDecimal;
import java.util.*;

/**
 * @Auther: liteng
 * @Date: 2018/7/2 14:05
 * @Description:
 */
public class IsExistAgedTableFilterComponent extends CountAgedItemReportComponent {

    private AmazonInventoryAgedReportDao amazonInventoryAgedReportDao;

    private AmazonInventoryAgedReportHistoryDao amazonInventoryAgedReportHistoryDao;

    private ThreadLocal<Integer> shopId;

    private CountAgedItemReportComponent countAgedItemReportComponent;

    @Override
    public void setAmazonInventoryAgedReportDao(AmazonInventoryAgedReportDao amazonInventoryAgedReportDao) {
        this.amazonInventoryAgedReportDao = amazonInventoryAgedReportDao;
    }

    @Override
    public void setAmazonInventoryAgedReportHistoryDao(AmazonInventoryAgedReportHistoryDao amazonInventoryAgedReportHistoryDao) {
        this.amazonInventoryAgedReportHistoryDao = amazonInventoryAgedReportHistoryDao;
    }

    public IsExistAgedTableFilterComponent() {
    }

    public IsExistAgedTableFilterComponent(CountAgedItemReportComponent component, ThreadLocal<Integer> shopIdThreadLocal, AmazonInventoryAgedReportDao amazonInventoryAgedReportDao) {
        this.shopId = shopIdThreadLocal;
        this.countAgedItemReportComponent = component;
        this.amazonInventoryAgedReportDao = amazonInventoryAgedReportDao;
    }

    public IsExistAgedTableFilterComponent(CountAgedItemReportComponent component, ThreadLocal<Integer> shopIdThreadLocal,
                                           AmazonInventoryAgedReportDao amazonInventoryAgedReportDao,
                                           AmazonInventoryAgedReportHistoryDao amazonInventoryAgedReportHistoryDao) {
        this.shopId = shopIdThreadLocal;
        this.countAgedItemReportComponent = component;
        this.amazonInventoryAgedReportDao = amazonInventoryAgedReportDao;
        this.amazonInventoryAgedReportHistoryDao = amazonInventoryAgedReportHistoryDao;
    }

    public IsExistAgedTableFilterComponent(CountAgedItemReportComponent component) {
        this.countAgedItemReportComponent = component;
    }


    /**
     * isHasHistoryRecord
     * 把不存在resultTable的记录新增
     *
     * @param newAgedItemList 传入刚刚同步的报告
     *                        oldAgedItemList 数据库中的报告
     *                        不存在的直接新增
     * @return 存在的则返回, 用于下一步判断
     */
    @Override
    public List<AmazonInventoryAgedReportPO> cost(List<AmazonInventoryAgedReportPO> newAgedItemList) {
        Date date = new Date();

        //查询库龄报告表   result_table
        List<AmazonInventoryAgedReportPO> dataBasePos = amazonInventoryAgedReportDao.findListByShopId(shopId.get());

        //已经存在result结果表中的数据
        List<AmazonInventoryAgedReportPO> existItems = new ArrayList<AmazonInventoryAgedReportPO>();

        //不存在result结果表中的数据
        List<AmazonInventoryAgedReportPO> directnessToDataBaseItems = new ArrayList<AmazonInventoryAgedReportPO>();

        Map<String, AmazonInventoryAgedReportPO> newAgedItemListPOMap = new HashMap<String, AmazonInventoryAgedReportPO>();
        for (AmazonInventoryAgedReportPO newAgedItemAgedReportPO : newAgedItemList) {
            newAgedItemListPOMap.put(newAgedItemAgedReportPO.getSku(), newAgedItemAgedReportPO);
        }

        //考虑到第一次插入到数据库中时，没有记录就不会进行下面的比较
        //所以直接插入所有的到结果表，因为结果表根本就没有数据
        if (CollectionUtils.isEmpty(dataBasePos)){
            directnessToDataBaseItems.addAll(newAgedItemList);
        }

        for (AmazonInventoryAgedReportPO dataBasePO : dataBasePos) {
            if (newAgedItemListPOMap.containsKey(dataBasePO.getSku())){
                //存在返回
                existItems.add(newAgedItemListPOMap.get(dataBasePO.getSku()));
            }else{
                directnessToDataBaseItems.add(newAgedItemListPOMap.get(dataBasePO.getSku()));
                //save以前不存在的记录
                //不存在 情况
            }
        }

        for (AmazonInventoryAgedReportPO directnessToDataBaseItem : directnessToDataBaseItems) {
            directnessToDataBaseItem.setSyncFirst(date);    //设置更新时间
//            directnessToDataBaseItem.setSnapshotDate(date);
            directnessToDataBaseItem.setSyncLast(date); //设置更新时间

            directnessToDataBaseItem.setStartDate(date);    //设置起始时间
            directnessToDataBaseItem.setSnapshotDate(date);
        }

//        if (CollectionUtils.isNotEmpty(dataBasePos)) {
//            Map<String, AmazonInventoryAgedReportPO> resultPOMap = new HashMap<String, AmazonInventoryAgedReportPO>();
//            for (AmazonInventoryAgedReportPO dataBaseAgedReportPO : dataBasePos) {
//                resultPOMap.put(dataBaseAgedReportPO.getSku(), dataBaseAgedReportPO);
//            }
//
//            //directnessToDataBaseItem 新传来的
//            for (AmazonInventoryAgedReportPO directnessToDataBaseItem : directnessToDataBaseItems) {
//                //database中的
//                AmazonInventoryAgedReportPO amazonInventoryAgedReportPO = resultPOMap.get(directnessToDataBaseItem.getSku());
//                //首次同步时间和最后同步时间为一个
////                directnessToDataBaseItem.setSyncFirst(date);    //设置首次同步时间
//
//                //还是把历史表2中的数据拿出来，只是不要历史表中的id和历史表中的起始日期和最后同步时间
//                if (amazonInventoryAgedReportPO == null) {
////                    BeanUtils.copyProperties(amazonInventoryAgedReportPO, directnessToDataBaseItem, new String[]{"id", "startDate", "syncLast"});
//                    directnessToDataBaseItem.setSyncLast(date); //设置更新时间
//                }
//
//            }
//        }

        //directnessToDataBaseItems copy了历史表中的数据
        //各种计算之后的结果
        List<AmazonInventoryAgedReportPO> calculateContentAfter = calculateContent(directnessToDataBaseItems);

        //其实直接新增就好了，因为不可能存在于数据库中，但是考虑到元件复用
        //左边是历史表中的数据，但是没有Id
        amazonInventoryAgedReportDao.updateDataById(calculateContentAfter,dataBasePos);

       return super.isEntrust(existItems,this.countAgedItemReportComponent);
    }





    /**
     * 计算商品的状态，无论走到了那一条分支，都会计算这些值
     * @param pos
     * @return
     */
    private List<AmazonInventoryAgedReportPO> calculateContent(List<AmazonInventoryAgedReportPO> pos) {

        List<AmazonInventoryAgedReportPO> calculateStartDate =
                CalculateContentUtils.calculateStartDate(pos);

        List<AmazonInventoryAgedReportPO> calculateNextClearPoint =
                CalculateContentUtils.calculateNextClearPoint(calculateStartDate);

        List<AmazonInventoryAgedReportPO> calculateTerminationDate =
                CalculateContentUtils.calculateTerminationDate(calculateNextClearPoint);

        List<AmazonInventoryAgedReportPO> calculatePlanStockToZeroDate =
                CalculateContentUtils.calculatePlanStockToZeroDate(calculateTerminationDate);

        List<AmazonInventoryAgedReportPO> calculateSellOutDate =
                CalculateContentUtils.calculateSellOutDate(calculatePlanStockToZeroDate);

        List<AmazonInventoryAgedReportPO> calculateSellOutStatus
                = CalculateContentUtils.calculateSellOutStatus(calculateSellOutDate);

        // TODO: 2018/8/16 clear warehouse
        List<AmazonInventoryAgedReportPO> calculateIsClearItem =
                CalculateContentUtils.calculateIsClearItem(calculateSellOutStatus);

        return calculateIsClearItem;
    }

}
