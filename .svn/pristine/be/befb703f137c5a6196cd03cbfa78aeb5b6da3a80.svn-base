package com.itecheasy.core.order;

import java.math.BigDecimal;
import java.util.List;

import org.apache.commons.lang.BooleanUtils;
import org.apache.commons.lang.StringUtils;

import com.itecheasy.common.util.CalcUtils;
import com.itecheasy.common.util.DeployProperties;
import com.itecheasy.core.BussinessException;
import com.itecheasy.core.email.EmailService;
import com.itecheasy.core.fba.FbaShopProductService;
import com.itecheasy.core.order.OrderService.OrderProblemType;
import com.itecheasy.core.order.dao.BaseOrderViewDao;
import com.itecheasy.core.po.BaseOrderViewPO;
import com.itecheasy.core.product.AMShopProduct;
import com.itecheasy.core.product.CMSProduct;
import com.itecheasy.core.product.Product;
import com.itecheasy.core.product.ProductService;
import com.itecheasy.core.product.ShopProductCmsInfo;
import com.itecheasy.core.product.ShopProductCmsInfoService;
import com.itecheasy.core.system.Currency;
import com.itecheasy.core.system.Merchandiser;
import com.itecheasy.core.system.ShopInfo;
import com.itecheasy.core.system.SystemService;
import com.itecheasy.webservice.client.CMSClient;
import com.itecheasy.webservice.client.DMSUtils;
import com.itecheasy.webservice.cms.OsmsStorageFreeze;

/**
 * @author wanghw
 * @date 2016-7-26
 * @description 订单基类接口
 * @version 1.2.0
 */
public abstract class BaseOrder implements IBaseOrder {
	protected BaseOrderViewDao baseOrderViewDao;
	protected SystemService systemService;
	protected EmailService emailService;
	protected ShopProductCmsInfoService shopProductCmsInfoService;
	protected FbaShopProductService fbaShopProductService;
	protected ProductService productService;

	public void setProductService(ProductService productService) {
		this.productService = productService;
	}

	public void setFbaShopProductService(FbaShopProductService fbaShopProductService) {
		this.fbaShopProductService = fbaShopProductService;
	}

	public void setShopProductCmsInfoService(ShopProductCmsInfoService shopProductCmsInfoService) {
		this.shopProductCmsInfoService = shopProductCmsInfoService;
	}

	public void setEmailService(EmailService emailService) {
		this.emailService = emailService;
	}

	public void setSystemService(SystemService systemService) {
		this.systemService = systemService;
	}
	
	public void setBaseOrderViewDao(BaseOrderViewDao baseOrderViewDao) {
		this.baseOrderViewDao = baseOrderViewDao;
	}
	
	@Override
	public boolean mateFbaShopProductOfOrder(OrderAddress orderAddress, ConditionOfAddNewOrder condition,
			String sellerSku, OrderProduct orderProduct,int shopId) {
		//商品是否无法匹配  sp 1.1.2
		boolean _not_mate = true;
		//fba订单匹配fba店铺商品 v1.2.2
		ShopProductCmsInfo  cmsProduct = shopProductCmsInfoService.getShopProductCmsInfo(sellerSku, shopId);
		if (cmsProduct != null) {
			_not_mate = false;
			orderProduct.setAbnormalMate(false);
			orderProduct.setCostPrice(cmsProduct.getCostPrice()
					.multiply(new BigDecimal(orderProduct.getShopQuantityOrdered()))
					.multiply(new BigDecimal(cmsProduct.getUnitQuantity())).setScale(3, 4).doubleValue());
			condition.set_cost_price(condition.get_cost_price() + orderProduct.getCostPrice());
			orderProduct.setCmsProductCode(cmsProduct.getCmsProductCode());
			orderProduct.setCmsProductId(cmsProduct.getCmsProductId());
			orderProduct.setUnit(cmsProduct.getUnit());
			orderProduct.setUnitQty(cmsProduct.getUnitQuantity());
			orderProduct.setUnitVolume(cmsProduct.getUnitVolume());
			orderProduct.setUnitWeight(cmsProduct.getUnitWeight());
			condition.setUnitWeightTotal(condition.getUnitWeightTotal()+orderProduct.getUnitWeight());
			orderProduct.setStatus(0);
			orderProduct.setProductTs(cmsProduct.isTs());
			// 带电、限制
//			processOrderProductLimit4AddOrder(orderAddress, condition, orderProduct, cmsProduct);
		}
		return _not_mate;
	}
	
	/**
	 * 匹配amazon店铺商品
	 * @param orderAddress
	 * @param condition
	 * @param
	 * @param am
	 * @param orderProduct
	 * @return
	 */
	public boolean mateShopProductOfOrder(OrderAddress orderAddress, ConditionOfAddNewOrder condition,
			 AMShopProduct am, OrderProduct orderProduct) {
		boolean _not_mate;
		_not_mate=false;
		
		orderProduct.setAmShopProductId(am.getId());
		Product product = productService.getProduct(am.getProductId());
		orderProduct.setCostPrice(product.getCostPrice().multiply(new BigDecimal(orderProduct.getShopQuantityOrdered())).
				multiply(new BigDecimal(product.getUnitQuantity())).setScale(3,4).doubleValue());
		condition.set_cost_price(condition.get_cost_price()+orderProduct.getCostPrice());
		orderProduct.setCmsProductCode(am.getCmsProductCode());
		orderProduct.setCmsProductId(product.getCmsProductId());
		orderProduct.setUnit(product.getUnit());
		orderProduct.setUnitQty(product.getUnitQuantity());
		orderProduct.setProductId(am.getProductId());
		orderProduct.setUnitVolume(CalcUtils.unitVoluem(new BigDecimal(product.getVolume()), product.getUnitQuantity()).doubleValue());
		orderProduct.setUnitWeight(CalcUtils.unitweight(new BigDecimal(product.getWeight()), product.getUnitQuantity()).doubleValue());
		condition.setUnitWeightTotal(condition.getUnitWeightTotal()+orderProduct.getUnitWeight());
		orderProduct.setStatus(1);
		// 判断带电标识
		CMSProduct cmsProduct = CMSClient.getCMSProductByCode(am.getCmsProductCode());
		if (cmsProduct != null) {
			//ts产品标记
			orderProduct.setProductTs(cmsProduct.isProductTs());
			//带电、限制
			processOrderProductLimit4AddOrder(orderAddress, condition, orderProduct, cmsProduct);
		}else{
			//永久下架
			_not_mate=true;
			orderProduct.setStatus(0);
		}
		return _not_mate;
	}

	@Override
	public boolean mateOtherProductOfOrder(OrderAddress orderAddress, ConditionOfAddNewOrder condition,
			String sellerSku, OrderProduct orderProduct) {
		//商品是否无法匹配  sp 1.1.2
		boolean _not_mate = true;
		CMSProduct cmsProduct = CMSClient.getCMSProductByCode(sellerSku);
		if (cmsProduct != null&&
				//2017-01-11 判断该商品是否为永久下架的商品，若为永久下架且无可用库存的，商品匹配失败，
				hasAvailableStorage4FinalOff(orderProduct.getShopQuantityOrdered(), 
						cmsProduct.getUnitQuantity(), sellerSku, cmsProduct)==null) {
			_not_mate = false;
			orderProduct.setAbnormalMate(false);
			orderProduct.setCostPrice(cmsProduct.getCostPrice()
					.multiply(new BigDecimal(orderProduct.getShopQuantityOrdered()))
					.multiply(new BigDecimal(cmsProduct.getUnitQuantity())).setScale(3, 4).doubleValue());
			condition.set_cost_price(condition.get_cost_price() + orderProduct.getCostPrice());
			orderProduct.setCmsProductCode(cmsProduct.getCode());
			orderProduct.setCmsProductId(cmsProduct.getId());
			orderProduct.setUnit(cmsProduct.getUnit());
			orderProduct.setUnitQty(cmsProduct.getUnitQuantity());
			orderProduct.setUnitVolume(CalcUtils.unitVoluem(cmsProduct.getVolume(), cmsProduct.getUnitQuantity())
					.doubleValue());
			orderProduct.setUnitWeight(CalcUtils.unitweight(cmsProduct.getWeight(), cmsProduct.getUnitQuantity())
					.doubleValue());
			condition.setUnitWeightTotal(condition.getUnitWeightTotal()+orderProduct.getUnitWeight());
			orderProduct.setStatus(0);
			orderProduct.setProductTs(cmsProduct.isProductTs());

			// 带电、限制
			processOrderProductLimit4AddOrder(orderAddress, condition, orderProduct, cmsProduct);
		}
		return _not_mate;
	}
	
	

	@Override
	public void processOrderProductLimit4AddOrder(OrderAddress orderAddress, ConditionOfAddNewOrder condition,
			OrderProduct orderProduct, CMSProduct cmsProduct) {
		// 判断带电标识
		if (DMSUtils.isElectronic(cmsProduct.getCategory1Name(), cmsProduct.getCategory2Name(),
				cmsProduct.getCategory3Name(), cmsProduct.getProductPropertyValues())) {
			condition.setElectronic(true);
			orderProduct.setElectronic(true);
			condition
					.setShippingMethod(DMSUtils.electronicShippingMethod(cmsProduct.getCategory1Name(),
							cmsProduct.getCategory2Name(), cmsProduct.getCategory3Name(),
							cmsProduct.getProductPropertyValues()));
		}
		// 带磁
		if (DMSUtils.isMagnetism(cmsProduct.getCategory1Name(), cmsProduct.getCategory2Name(),
				cmsProduct.getCategory3Name(), cmsProduct.getProductPropertyValues())) {
			orderProduct.setMagnetism(true);
		}
		// 纺织品
		if (DMSUtils.isTextile$new(cmsProduct.getProductPropertyValues(), orderProduct.getTitle())) {
			orderProduct.setTextile(true);
		}

		// 限制商品
		if (DMSUtils.islimit(cmsProduct.getCategory1Name(), cmsProduct.getCategory2Name(),
				cmsProduct.getCategory3Name(), cmsProduct.getProductPropertyValues(), orderAddress.getCountryId())) {
			condition.setOrder_status(0);
			orderProduct.setIslimit(true);
		}
	}


	@Override
	public int checkShopShippingMethodReturnNum(OrderDetail orderDetail,List productCodeList) {

		//获取order中所有的product，遍历来进行判断是否带电
		int odt = -1; //货运方式 是否带电判断
		//根据带电的方式来判断默认货运方式
		if (productCodeList!=null && productCodeList.size() >0){
			CMSProduct cmsProduct = CMSClient.getCMSProduct((Integer) productCodeList.get(0)); //通讯到cms 更具itemid获取
			if(cmsProduct != null) {
				odt = DMSUtils.electronicShippingMethod(cmsProduct.getCategory1Name(),
						cmsProduct.getCategory2Name(), cmsProduct.getCategory3Name(),
						cmsProduct.getProductPropertyValues());
			}
		}

		boolean isElectric = false;
		//判断是否带电，不带电为-1,，带电为零
		if(odt==116 || odt==117 || odt==118){
			isElectric = true;
		}else{
			isElectric = false;
		}


		//获取订单的一些信息
		Integer country = orderDetail.getCountry();
		Integer shippingMethod = orderDetail.getShippingMethod();
		Integer shopId = orderDetail.getShopId();
		Double freight = orderDetail.getShopShippingPrice();


		//订单运费为0且不带电的，按照货运国家来给货运方式
		if(freight==0 && isElectric){
			if(shopId==15){
				if(country ==50){	//Amazon_IT2  &&意大利
					return EUB;
				}else{
					return 0;	//其他国家
				}
			}else if (shopId==13 && country ==24){   //Amazon_DE2 &&德国
				return SLDE_DESPECIALLINE;
			}else if(shopId==39 && country ==16){   //Amazon_CA4  &&加拿大
				return EUB;
			}else if (orderDetail.getCountry() != null&&orderDetail.getCountry() == US) {
				// 订单运费为0无论有没有带电，美国：USPS
				return USPS;
//			}else if (isElectric) { //带电
//				orderDetail.setShippingMethod(shippingMethod);
//				orderDetail.setElectronic(true);
			} else {
				if (orderDetail.getCountry() != null) {
					if (orderDetail.getCountry() == US) {
						// 订单运费为0时，欧洲国家网店，货运方式默认为MailPost
						// 美国网店货运方式默认为USPS
						orderDetail.setShippingMethod(USPS);
						return USPS;
					} else if (orderDetail.getCountry() == GERMANY) {
						// 德国店铺 德国DHL小包
						orderDetail.setShippingMethod(DGM);
						return DGM;
						// dgm小语种转换
//						convertAddress4DGM(detail.getOrderAddress());
					} else if (orderDetail.getCountry() == FRANCE) {
						// 法国默认为NL MailPost
						orderDetail.setShippingMethod(NL_MAILPOST);
						return NL_MAILPOST;
					} else if (orderDetail.getCountry() == ITALY) {
						orderDetail.setShippingMethod(SL_IT);
						return SL_IT;
					} else if (orderDetail.getCountry() == SPAIN) {
						orderDetail.setShippingMethod(SL_ES);
						return SL_ES;
					} else if(orderDetail.getCountry() == MEXICO){
						//墨西哥
						orderDetail.setShippingMethod(EUB);
						return EUB;
					} else if(orderDetail.getCountry() == CANADA){
						//加拿大
						orderDetail.setShippingMethod(SL_CA);
						return SL_CA;
					} else if(orderDetail.getCountry()==AUSTRALIA){
						//2017-12-06 澳大利亚
						orderDetail.setShippingMethod(EUB);
						return EUB;
					} else if(orderDetail.getCountry()==UK &&orderDetail.getWebWeight()!=null &&orderDetail.getWebWeight()>200d){
						//v1.2.8 英国 总批重大于200g
						orderDetail.setShippingMethod(SL_UK);
						return SL_UK;
					} else {
						orderDetail.setShippingMethod(MAIL_POST);
						return MAIL_POST;
					}
				}
			}
			//其他店铺 还是保留原有的逻辑
//目的地国家为其他国家时，货运方式改成else，我们自己来选
		}else if (freight==0 && isElectric){
			//订单运费为0且带电，根据商品的带电属性，给默认的带电货运方式（每个店铺都一样）这里规则不变
			return odt;
		}else if (freight!=0){
			// 订单运费不为0的，货运方式默认为else（每个店铺都一样）
			return 0;
		}
		return 0;   // else的货运方式
	}

	//不用的
	@Override
	public boolean checkShopShippingMethod(OrderDetail orderDetail) {
		return true;
	}
	
	@Override
	public void processOrderShippingMethod(StringBuilder remark, OrderDetail detail, ConditionOfAddNewOrder condition) {
//		if(checkShopShippingMethod(detail)){

//		Integer shippingMethod =detail.getShippingMethod();
//		Double freight = detail.getShopShippingPrice();
		double freight = condition.getShipTotalPrice();
		Integer shopId = detail.getShopId();

			//smt
		 if (BooleanUtils.isNotTrue(detail.getIsOtherSystem())
				&&BooleanUtils.isNotTrue(detail.getManual())
				&& condition.getShipTotalPrice() == 0) {

//			if (detail.getCountry() != null&&detail.getCountry() == US) {
//				// 订单运费为0无论有没有带电，美国：USPS
//				detail.setShippingMethod(USPS);
//			}else if (condition.isElectronic()) {
//				detail.setShippingMethod(condition.getShippingMethod());
//				detail.setElectronic(true);
//			} else {

			if(freight==0.0 && !condition.isElectronic()) {
				if (shopId == 15) {
					if (detail.getCountry() == 50) {    //Amazon_IT2  &&意大利
						detail.setShippingMethod(EUB);
					} else {
						detail.setShippingMethod(0);    //其他国家
					}
				} else if (shopId == 13 && detail.getCountry() == 24) {   //Amazon_DE2 &&德国
					detail.setShippingMethod(SLDE_DESPECIALLINE);
				} else if (shopId == 39 && detail.getCountry() == 16) {   //Amazon_CA4  &&加拿大
					detail.setShippingMethod(EUB);

				} else if (detail.getCountry() != null && detail.getCountry() == US) {
					// 订单运费为0无论有没有带电，美国：USPS
					detail.setShippingMethod(USPS);
				} else {
					if (detail.getCountry() != null) {
						if (detail.getCountry() == US) {
							// 订单运费为0时，欧洲国家网店，货运方式默认为MailPost
							// 美国网店货运方式默认为USPS
							detail.setShippingMethod(USPS);
						} else if (detail.getCountry() == GERMANY) {
							// 德国店铺 德国DHL小包
							detail.setShippingMethod(DGM);
							// dgm小语种转换
//						convertAddress4DGM(detail.getOrderAddress());
						} else if (detail.getCountry() == FRANCE) {
							// 法国默认为NL MailPost
							detail.setShippingMethod(NL_MAILPOST);
						} else if (detail.getCountry() == ITALY) {
							detail.setShippingMethod(SL_IT);
						} else if (detail.getCountry() == SPAIN) {
							detail.setShippingMethod(SL_ES);
						} else if (detail.getCountry() == MEXICO) {
							//墨西哥
							detail.setShippingMethod(EUB);
						} else if (detail.getCountry() == CANADA) {
							//加拿大
							detail.setShippingMethod(SL_CA);
						} else if (detail.getCountry() == AUSTRALIA) {
							//2017-12-06 澳大利亚
							detail.setShippingMethod(EUB);
						} else if (detail.getCountry() == UK && condition.getUnitWeightTotal() > 200d) {
							//v1.2.8 英国 总批重大于200g
							detail.setShippingMethod(SL_UK);
						} else {
							detail.setShippingMethod(MAIL_POST);
						}
					}
				}
			}else if (freight==0 && condition.isElectronic()){
			 //订单运费为0且带电，根据商品的带电属性，给默认的带电货运方式（每个店铺都一样）这里规则不变
				detail.setShippingMethod(condition.getShippingMethod());
			}else if (freight!=0){
				 // 订单运费不为0的，货运方式默认为else（每个店铺都一样）
				detail.setShippingMethod(0);
			}else{
				// else的货运方式 自己来选
				detail.setShippingMethod(0);
			}

		 }

		 //判断是否合法
		if(detail.getShippingMethod()<=0) {
			// 无法识别货运方式定义
			// 一个订单中问题类型判断优先级为：无法识别商品>无法识别货运方式>断货>货运信息有问题
			// condition.setOrder_status(0);
			detail.setShippingMethod(0);
			// detail.setProblemStatus(1);
			// condition.setProblem((condition.getProblem()+OrderProblemType.无法识别货运方式.getVal()));
			// detail.setProblemType(OrderProblemType.无法识别货运方式.getVal());
			detail.setIsSend(false);
			remark.append("无法识别货运方式;");
		}
	}
	

	
	@Override
	public boolean hasProblemForAddressInfo(OrderAddress address) {
		if ((StringUtils.isEmpty(address.getAddressLine1())&&
				StringUtils.isEmpty(address.getAddressLine2()))||
				StringUtils.isEmpty(address.getName())||
				StringUtils.isEmpty(address.getCity())||
				StringUtils.isEmpty(address.getCountryCode())||
				StringUtils.isEmpty(address.getPostalCode())||
				StringUtils.isEmpty(address.getPhone())||
				StringUtils.isEmpty(address.getStateOrRegion())) {
			return true;
		}
		return false;
	}


	
	
	@Override
	public void initOrderProblem(OrderDetail detail, OrderAddress orderAddress, ConditionOfAddNewOrder condition) {
		StringBuilder remark=new StringBuilder();
		if(detail.getRemark()!=null)
			remark.append(detail.getRemark());
		//判断货运信息
		if (hasProblemForAddressInfo(orderAddress)) {
			detail.setProblemStatus(1);
			condition.setProblem((condition.getProblem()+OrderProblemType.货运信息有问题.getVal()));
			detail.setProblemType(OrderProblemType.货运信息有问题.getVal());
			remark.append("货运信息有问题;");
			detail.setIsSend(false);
		}
		
		// 判断运费、是否带电,无法识别的货运方式
		processOrderShippingMethod(remark, detail, condition);
		
		if (condition.is_not_recognition()) {
			//订单备注默认为“无法识别商品”，订单问题状态为“有问题”，问题类型为“无法匹配商品”
			detail.setProblemStatus(1);
			remark.append("无法识别商品;");
			condition.setProblem((condition.getProblem()+OrderProblemType.无法匹配商品.getVal()));
			detail.setProblemType(OrderProblemType.无法匹配商品.getVal());
		}
		detail.setProblemVal(condition.getProblem());
		detail.setCmsPrepare(ORDER_PREPARE_TYPE_CMS);
		detail.setRemark(remark.toString());
		detail.setStatus(condition.getOrder_status());	
		
	}
	
	@Override
	public int getCurrencyIdByCode(String code) {
		// 币种
		Currency curr = systemService.getCurrencyByCode(code);
		if (curr != null) {
			return curr.getId();
		}
		return 0;
	}

	@Override
	public void hasAvailableStockout(UpdateOrderProductForm form, String updateProductCode, CMSProduct product)
			{
		if (product == null) {
			throw new BussinessException("商品编码" + updateProductCode + "在CMS系统不存在");
		}

		String result=hasAvailableStorage4FinalOff(form.getQty(),form.getUnitQty(), updateProductCode, product);
		if(result!=null)
			throw new BussinessException(result);
	}
	
	protected String hasAvailableStorage4FinalOff(double orderedQty,int unitQty, String updateProductCode, CMSProduct product) {
		// 永久下架判断可用库存
		if(product==null)
			return "商品" + updateProductCode + "在cms不存在！";
		if (product.getOfflineStatus() == 2) {
			OsmsStorageFreeze free = CMSClient.getAvailableStockAndFreezeQty(updateProductCode);
			if (free == null) {
				if (product.getAvailableStock() == 0
						|| product.getAvailableStock() /unitQty / orderedQty < 1.0) {
					return "商品" + updateProductCode + "永久下架，且可用库存不足！";
				}
			} else {
				if ((free.getAvailableQuantity() / unitQty / orderedQty < 1.0 || free
						.getRealFreezeQuantity() == 0)
						&& (product.getAvailableStock() == 0 || product.getAvailableStock() / unitQty
								/ orderedQty< 1.0)) {
					return "商品" + updateProductCode + "永久下架，且可用库存不足！";
				}
			}
		}
		return null;
	}
	
	protected void sendEmail2Administator(String subject, String comment) {
		emailService.addEmail(DeployProperties.getInstance().getProperty("system.email"), subject, comment);
	}
	
	protected int getMaxTicketGroupID() {
		String hql = "from BaseOrderViewPO po where sendGroupId!=null order by sendGroupId desc";
		BaseOrderViewPO po = baseOrderViewDao.findByHql(hql);
		if (po != null) {
			return po.getSendGroupId();
		}
		return 0;
	}
	
	/**
	 * 订单商品信息处理
	 * @param detail
	 * @throws BussinessException
	 */
	protected void checkNewOrder(OrderDetail detail) throws BussinessException {
		ConditionOfAddNewOrder condition = new ConditionOfAddNewOrder();// 信息处理条件
		condition.setShipTotalPrice(detail.getShopShippingPrice());// 订单运费为0
		boolean _not_mate;
		for (OrderProduct product : detail.getOrderItems()) {
			_not_mate = mateOtherProductOfOrder(detail.getOrderAddress(), condition, product.getCmsProductCode(),
					product);

			if (_not_mate) {
				condition.setOrder_status(0);
				condition.set_not_recognition(true);
			}
		}
		this.initOrderProblem(detail, detail.getOrderAddress(), condition);
		detail.setCostPrice(condition.get_cost_price());
		detail.setShopShippingPrice(condition.getShipTotalPrice());
	}
	
	
	@Override
	public OrderAddress processOrderAddressSpecial(OrderDetail detail, OrderAddress orderAddress,ShopInfo shopInfo) {
		// TODO Auto-generated method stub
		return null;
	}
	
	protected void sendEmail2Customerservices(int merchandiserId, String subject, String comment) {
		Merchandiser Merchandiser = systemService.getMerchandiserById(merchandiserId);
		if(Merchandiser!=null)
			emailService.addEmail(Merchandiser.getMerchandiserEmail(), subject, comment);
	}
}
