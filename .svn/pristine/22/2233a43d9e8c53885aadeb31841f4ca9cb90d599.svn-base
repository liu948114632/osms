package com.itecheasy.osms.order;

import java.util.List;

import javax.jws.WebParam;
import javax.jws.WebService;

import com.itecheasy.common.PageList;
import com.itecheasy.core.BussinessException;
import com.itecheasy.core.fba.*;


/**
 * @author taozihao
 * @date 2018年6月7日 下午5:44:57
 * @description fba补货
 */

@WebService
public interface FbaInboundWebService {
	/**
	 * 检查excel文件里面的商品项是否都有对应的 fba条码和条码名称 以及状态
	 * 如果没有则给出错误项，每个错误sku之间采用英文逗号分开，如果都通过，则返回null
	 *
	 * @param items
	 * @return
	 */
	public List<String> checkExcel(@WebParam(name = "shopId") int shopId, @WebParam(name = "skus") List<String> skus);

	/**
	 * 如果导入的文件判断为全部通过后接着调用此方法，将商品的信息返回给前端
	 *
	 * @param items
	 * @return
	 */
	public List<FbaInboundPlanItemExcelResult> showExcelProductResult(@WebParam(name = "shopId") int shopId,
																	  @WebParam(name = "items") List<InboundPlanProductItem> items);

	/**
	 * 创建fba补货计划，放在本地，还未提交
	 *
	 * @return
	 */
	public int createFbaInboundPlan(@WebParam(name = "shopId") int shopId, @WebParam(name = "planName") String planName,
									@WebParam(name = "shipToCountryCode") String shipToCountryCode,
									@WebParam(name = "shippingMethod") String shippingMethod,
									@WebParam(name = "items") List<InboundPlanProductItem> items,
									@WebParam(name = "isSubmitToAm") int isSubmitToAm,
									@WebParam(name = "preparePlanId") int preparePlanId,
									@WebParam(name = "operatorId") int operatorId);

	/**
	 * 查询补货计划 提供分页
	 *
	 * @param shopId
	 * @param sku
	 * @param productCode
	 * @return
	 */
	public PageList<FbaInboundPlanVO> getFbaInboundPlanList(@WebParam(name = "shopId") int shopId,
															@WebParam(name = "page") int page, @WebParam(name = "pageSize") int pageSize,
															@WebParam(name = "sku") String sku, @WebParam(name = "productCode") String productCode,
															@WebParam(name = "operatorId") int operatorId);

	/**
	 * 根据planId查询出当前计划信息
	 *
	 * @param planId
	 * @return
	 */
	public FbaInboundPlanSearchVO findFbaInboundPlanByPlanId(int planId);

	/**
	 * 修改fba本地补货计划，只能修改未提交的 注意修改时间
	 */
	public void updateFbaInboundPlan(@WebParam(name = "planId") int planId,
									 @WebParam(name = "planName") String planName,
									 @WebParam(name = "shipToCountryCode") String shipToCountryCode,
									 @WebParam(name = "shippingMethod") String shippingMethod,
									 @WebParam(name = "items") List<InboundPlanProductItem> items,
									 @WebParam(name = "operatorId") int operatorId);

	/**
	 * 取消fba补货计划，只能取消未提交的 注意修改时间
	 *
	 * @param planId
	 */
	public void cancelFbaInboundPlan(@WebParam(name = "planId") int planId,
									 @WebParam(name = "operatorId") int operatorId);

	public void deleteFbaInboundPlan(@WebParam(name = "planId") int planId,
									 @WebParam(name = "operatorId") int operatorId);

	/**
	 * 将创建好的本地fba补货计划提交给亚马逊,提交之后修改状态属性
	 *
	 * @param planId
	 */
	public List<FbaPreInboundOrderVO> submitFbaInboundPlan(@WebParam(name = "planId") int planId,
														   @WebParam(name = "shopId") int shopId, @WebParam(name = "operatorId") int operatorId)throws BussinessException;

	/**
	 * 提供shipmenId，然后将对应的补货计划提交上去
	 *
	 * @param shipmenId
	 * @return
	 */
	public void createFbaInboundOrder(
			@WebParam(name = "shipmenIdAndNameVO") List<ShipmenIdAndNameVO> shipmenIdAndNameVO,
			@WebParam(name = "shopId") int shopId, @WebParam(name = "planId") int planId,
			@WebParam(name = "operatorId") int operatorId) throws BussinessException;


	/**
	 * 功能：FBA补货订单 更新
	 */
	public void updateFbaInboundOrder(@WebParam(name = "shipmentId") String shipmentId,
									  @WebParam(name = "shopId") int shopId,
									  @WebParam(name = "items") List<FbaPreInboundItemVO> items,
									  @WebParam(name = "operatorId") int operatorId);


	/**
	 * 根据计划id查询对应的日志信息
	 * @param planId
	 * @return
	 */
	public List<FbaInboundPlanOperateLog> getOperateLogsByPlanId(@WebParam(name = "planId") int planId);


	/**
	 *
	 * 跟踪单号提交AM并更新为已发货
	 *
	 * @param putTransportContentVO
	 * @return
	 */
	public String putTransportContent(@WebParam(name = "putTransportContentVO")PutTransportContentVO putTransportContentVO);




}


