package com.itecheasy.core.fba.AgedItemReportCalculateUtil;

import com.itecheasy.core.fba.dao.AmazonInventoryAgedReportDao;
import com.itecheasy.core.po.AmazonInventoryAgedReportPO;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 *
 */
public  class OnlyThan180DayAgedItemFilterComponent implements CountAgedItemReportComponent {

    private AmazonInventoryAgedReportDao amazonInventoryAgedReportDao;

    // ThreadLocal<Long> longLocal = new ThreadLocal<Long>();
    private Integer shopId;

    //库龄历史表

    private  CountAgedItemReportComponent countAgedItemReportComponent;

    public OnlyThan180DayAgedItemFilterComponent() {
    }

    public void setAmazonInventoryAgedReportDao(AmazonInventoryAgedReportDao amazonInventoryAgedReportDao) {
        this.amazonInventoryAgedReportDao = amazonInventoryAgedReportDao;
    }

    public OnlyThan180DayAgedItemFilterComponent(CountAgedItemReportComponent component) {
        this.countAgedItemReportComponent = component;
    }

    public OnlyThan180DayAgedItemFilterComponent(CountAgedItemReportComponent component,Integer shopId) {
        this.shopId = shopId;
        this.countAgedItemReportComponent = component;
    }

    /**
     *  step4
     *  如果该商品的库龄仅仅大于180
     *  如果不是的话 就把起始时间改为服务器当前时间
     * @param items
     * @return
     */
    @Override
    public List<AmazonInventoryAgedReportPO> cost(List<AmazonInventoryAgedReportPO> items) {
        //自己的逻辑   计算完成之后继续委托

        //不满足仅库龄大于180天的商品这个条件的商品
        List<AmazonInventoryAgedReportPO> satisfiedConditionItems = new ArrayList<AmazonInventoryAgedReportPO>();
        List<AmazonInventoryAgedReportPO> notSatisfiedConditionItems = new ArrayList<AmazonInventoryAgedReportPO>();

        //仅库龄大于180天的商品


        for (AmazonInventoryAgedReportPO agedItem : items) {
            BigDecimal invAge0To90Days = agedItem.getInvAge0To90Days();
            BigDecimal invAge91To180Days = agedItem.getInvAge91To180Days();
            BigDecimal invAge181To270Days = agedItem.getInvAge181To270Days();
            BigDecimal invAge271To365Days = agedItem.getInvAge271To365Days();
            BigDecimal invAge365PlusDays = agedItem.getInvAge365PlusDays();

            int i = invAge0To90Days.compareTo(BigDecimal.ZERO); //(r==1) 左边大于右边
            int i1 = invAge91To180Days.compareTo(BigDecimal.ZERO);
            int i2 = invAge181To270Days.compareTo(BigDecimal.ZERO);
            int i3 = invAge271To365Days.compareTo(BigDecimal.ZERO);
            int i4 = invAge365PlusDays.compareTo(BigDecimal.ZERO);

            //仅库龄大于180天的商品
            if (i <= 0 && i1 <= 0 && i2 > 0 && i3 > 0 && i4 > 0) {
                satisfiedConditionItems.add(agedItem);
            }else{
                //其他状态库龄的商品
                notSatisfiedConditionItems.add(agedItem);
            }
        }

        //更新操作

        //

//        返回的就是余下的
        return this.countAgedItemReportComponent.cost(notSatisfiedConditionItems);
    }
}
