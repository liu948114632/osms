/*
 * Copyright (c) 2018. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
 * Morbi non lorem porttitor neque feugiat blandit. Ut vitae ipsum eget quam lacinia accumsan.
 * Etiam sed turpis ac ipsum condimentum fringilla. Maecenas magna.
 * Proin dapibus sapien vel ante. Aliquam erat volutpat. Pellentesque sagittis ligula eget metus.
 * Vestibulum commodo. Ut rhoncus gravida arcu.
 */

package com.itecheasy.core.fba.AgedItemReportCalculateUtil.calculateTemplete;

import com.itecheasy.common.util.CollectionUtils;
import com.itecheasy.core.fba.AgedItemReportCalculateUtil.CalculateContentUtils;
import com.itecheasy.core.po.AmazonInventoryAgedReportPO;

import java.util.Date;
import java.util.List;

/**
 * @Auther: liteng
 * @Date: 2018/8/13 13:38
 * @Description:
 */
public abstract class BaseTemplate {



    public List<AmazonInventoryAgedReportPO>  calculateArithmetic(List<AmazonInventoryAgedReportPO> pos) {

        List<AmazonInventoryAgedReportPO> preAmazonInventoryAgedReportPOS=null;
        if (isPreContentCalculate()){
            List<AmazonInventoryAgedReportPO> amazonInventoryAgedReportPOS = preContentCalculate(pos);
        }

        //step2
        List<AmazonInventoryAgedReportPO> calculateNextClearPoint = null;
        if (CollectionUtils.isNotEmpty(preAmazonInventoryAgedReportPOS)) {
             calculateNextClearPoint = CalculateContentUtils.calculateNextClearPoint(preAmazonInventoryAgedReportPOS);
        }else{
             calculateNextClearPoint = CalculateContentUtils.calculateNextClearPoint(pos);
        }

        //step3
        List<AmazonInventoryAgedReportPO> calculateTerminationDate =
                CalculateContentUtils.calculateTerminationDate(calculateNextClearPoint);

        List<AmazonInventoryAgedReportPO> calculatePlanStockToZeroDate =
                CalculateContentUtils.calculatePlanStockToZeroDate(calculateTerminationDate);

        List<AmazonInventoryAgedReportPO> calculateSellOutDate =
                CalculateContentUtils.calculateSellOutDate(calculatePlanStockToZeroDate);

        List<AmazonInventoryAgedReportPO> calculateSellOutStatus
                = CalculateContentUtils.calculateSellOutStatus(calculateSellOutDate);

//        if (isAfterContentCalculate()){
//            afterContentCalculate(pos);
//        }


        return calculateSellOutStatus;
    }

    /**
     * 前置内容计算
     *
     *  Date date = new Date();
     *         for (
     *                 AmazonInventoryAgedReportPO directnessToDataBaseItem : pos) {
     *             directnessToDataBaseItem.setStartDate(date);    //设置起始时间
     *             directnessToDataBaseItem.setSyncLast(date); //设置更新时间
     *         }
     * @param pos
     * @return
     */
    public abstract List<AmazonInventoryAgedReportPO> preContentCalculate(List<AmazonInventoryAgedReportPO> pos);

    public abstract List<AmazonInventoryAgedReportPO> afterContentCalculate(List<AmazonInventoryAgedReportPO> pos);



    public boolean isPreContentCalculate() {
        return false;
    }

    public boolean isAfterContentCalculate() {
        return false;
    }


//    public void boilWater() {
//        System.out.println("Boiling water");
//    }




}
