package com.itecheasy.common;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.ParameterizedType;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.log4j.Logger;
import org.hibernate.HibernateException;
import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.itecheasy.common.Param.ParamType;
import com.itecheasy.common.dao.Criteria;
import com.itecheasy.common.util.CollectionUtils;
import com.itecheasy.common.util.HqlUtils;

public class BaseDAOImpl<T, PK extends Serializable> extends
		HibernateDaoSupport implements BaseDAO<T, PK> {

	private static Logger logger = Logger
			.getLogger(BaseDAOImpl.class.getName());

	private Class<T> entityClass;

	private static final int BATCH_SIZE = 50;

	@SuppressWarnings("unchecked")
	public BaseDAOImpl() {
		this.entityClass = (Class<T>) ((ParameterizedType) this.getClass()
				.getGenericSuperclass()).getActualTypeArguments()[0];
	}

	@SuppressWarnings("unchecked")
	@Override
	public PK addObject(T entity) {
		return (PK) getHibernateTemplate().save(entity);
	}

	@Override
	public void addObject(List<T> entitys) {
		if(entitys==null){
			return;
		}
		for (int i = 0; i < entitys.size(); i++) {
			addObject(entitys.get(i));
			if (((i + 1) % BATCH_SIZE) == 0) {
				getHibernateTemplate().flush();
				getHibernateTemplate().clear();
			}
		}
	}

	@Override
	public void updateObject(T entity) {
		if(entity==null){
			return;
		}
		getHibernateTemplate().update(entity);
	}

	@Override
	public void updateObject(List<T> entitys) {
		for (int i = 0; i < entitys.size(); i++) {
			updateObject(entitys.get(i));
			if (((i + 1) % BATCH_SIZE) == 0) {
				getHibernateTemplate().flush();
				getHibernateTemplate().clear();
			}
		}
	}

	@Override
	public void mergeObject(T entity) {
		if(entity==null){
			return;
		}
		getHibernateTemplate().merge(entity);
	}

	@Override
	public void mergeObject(List<T> entitys) {
		for (int i = 0; i < entitys.size(); i++) {
			mergeObject(entitys.get(i));
			if (((i + 1) % BATCH_SIZE) == 0) {
				getHibernateTemplate().flush();
				getHibernateTemplate().clear();
			}
		}
	}

	@Override
	public void deleteObject(T entity) {
		if(entity==null){
			return;
		}
		getHibernateTemplate().delete(entity);
	}

	@SuppressWarnings("unchecked")
	@Override
	public void deleteObjectById(PK pk) {
		T obj = (T) getHibernateTemplate().load(entityClass, pk);
		if(obj==null){
			return;
		}
		deleteObject(obj);
	}

	@SuppressWarnings("unchecked")
	@Override
	public void deleteObjectByIds(Collection<PK> pks) {
		int i = 0;
		for (Serializable pk : pks) {
			T obj = (T) getHibernateTemplate().load(entityClass, pk);
			deleteObject(obj);
			if (((i + 1) % BATCH_SIZE) == 0) {
				getHibernateTemplate().flush();
				getHibernateTemplate().clear();
			}
			i++;
		}
	}

	@Override
	public void deleteObjects(Collection<T> objects) {
		int i = 0;
		for (T obj : objects) {
			deleteObject(obj);
			if (((i + 1) % BATCH_SIZE) == 0) {
				getHibernateTemplate().flush();
				getHibernateTemplate().clear();
			}
			i++;
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public T getObject(Serializable pk) {
		return (T) getHibernateTemplate().get(entityClass, pk);
	}

	@SuppressWarnings("unchecked")
	@Override
	public T getObject(Serializable pk, LockMode lockMode) {
		return (T) getHibernateTemplate().get(entityClass, pk, lockMode);
	}

	@Override
	public Object getSingleObject(String hql) {
		return getSingleObject(hql, new Object[] {});
	}

	@Override
	public Object getSingleObject(String hql, Object parameter) {
		return getSingleObject(hql, new Object[] { parameter });
	}

	@SuppressWarnings("unchecked")
	@Override
	public int updateBySql(final String sql){
		int qty = (Integer)getHibernateTemplate().execute(new HibernateCallback() {
			@Override
			public Object doInHibernate(Session session){
				SQLQuery query = session.createSQLQuery(sql);
				int qty= query.executeUpdate();
				return qty;
			}
		});
		return qty ;
	}

	@Override
	public void flush() {
		getHibernateTemplate().flush();
	}

	@SuppressWarnings("unchecked")
	public List<String> getSimpleColumnBySql(final String sql, final List<Object> parameters) {
		return (List<String>) this.getHibernateTemplate().execute(new HibernateCallback() {
			@SuppressWarnings("deprecation")
			@Override
			public Object doInHibernate(Session session) throws HibernateException, SQLException {
				Connection conn = session.connection();
				PreparedStatement ps = conn.prepareStatement(sql);
				if (CollectionUtils.isNotEmpty(parameters)) {
					for (int i = 1; i <= parameters.size(); i++) {
						ps.setObject(i, parameters.get(i - 1));
					}
				}
				ps.execute();

				ResultSetMetaData rsmd = (ResultSetMetaData) ps.getMetaData();
				List<String> columnNames = new ArrayList<String>();
				for (int i = 1; i < rsmd.getColumnCount() + 1; i++) {
					columnNames.add(rsmd.getColumnName(i));
				}
				List<String> data = new ArrayList<String>();
				ResultSet _rs = ps.getResultSet();
				while (_rs != null && _rs.next()) {
					data.add(_rs.getString(1));
				}
				return data;
			}
		});
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<String> getSimpleColumnByStoredProcedure(final String name,
			final List<Param> parameters) {		
		return (List<String>) this.getHibernateTemplate().execute( new HibernateCallback() {
			@SuppressWarnings("deprecation")
			@Override
			public Object doInHibernate(Session session) throws HibernateException,
					SQLException {
				Connection conn = session.connection();
				StringBuilder sql = new StringBuilder();
				sql.append(" exec ");
				sql.append(name);
				for (int i =0;i<parameters.size();i++) {
					if(i==0){
						sql.append(" @"+parameters.get(i).getParamName()+" = ? " );
					}else{
						sql.append(" ,@"+parameters.get(i).getParamName()+" = ? " );
					}
				}
				PreparedStatement ps =  conn.prepareStatement(sql.toString());
				
				for (int i = 1;i<=parameters.size();i++) {
					ps.setObject(i, transformParams(parameters.get(i-1)));
				}
 				long start = System.currentTimeMillis();
				ps.execute();
				ResultSetMetaData rsmd = (ResultSetMetaData) ps.getMetaData();
				List<String> columnNames = new ArrayList<String>();
				for (int i = 1; i < rsmd.getColumnCount() + 1; i++) {
					columnNames.add(rsmd.getColumnName(i));
				}
				List<String> data = new ArrayList<String>();
				ResultSet _rs = ps.getResultSet();
				while (_rs != null && _rs.next()) {
					data.add(_rs.getString(1));
				}
				return data;
			}
		});
	}
	
	
	@SuppressWarnings("unchecked")
	@Override
	public Object getSingleObject(String hql, Object[] parameters) {
		List list = getHibernateTemplate().find(hql, parameters);
		if (list == null || list.isEmpty()) {
			return null;
		}
		return list.get(0);
	}
	
    @Override
	public Object getSingleObjectBySql(final String sql, final Object[] parameters)
	{
        return this.getHibernateTemplate().execute( new HibernateCallback() {
            @SuppressWarnings("deprecation")
            @Override
            public Object doInHibernate(Session session) throws HibernateException,
                    SQLException {
                Connection conn = session.connection();
                PreparedStatement ps =  conn.prepareStatement(sql.toString());
                if(parameters != null)
                {
                    for (int i = 0; i < parameters.length; i++) {
                        ps.setObject(i + 1, parameters[i]);
                    }
                }
                ResultSet rs = ps.executeQuery();
                if(rs != null && rs.next())
                {
                    return rs.getObject(1);
                }
                return null;
            }
        });
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<T> getAll() {
		return getHibernateTemplate().loadAll(this.entityClass);
	}

	@Override
	public T findByHql(String hql, String alias, LockMode lockMode) {
		return findByHql(hql, alias, new Object[] {}, lockMode);
	}

	@Override
	public T findByHql(String hql, String alias, Object parameter,
			LockMode lockMode) {
		return findByHql(hql, alias, new Object[] { parameter }, lockMode);
	}

	@SuppressWarnings("unchecked")
	@Override
	public T findByHql(String hql, String alias, Object[] parameters,
			LockMode lockMode) {
		Query queryObject = getSession().createQuery(hql);
		queryObject.setLockMode(alias, lockMode);
		if (parameters != null) {
			for (int i = 0; i < parameters.length; i++) {
				queryObject.setParameter(i, parameters[i]);
			}
		}
		List<T> list = queryObject.setFirstResult(0).setMaxResults(1).list();;
		if (list == null || list.size() == 0) {
			return null;
		} else {
			T t = list.get(0);
			return t;
		}
	}

	@Override
	public T findByHql(String hql) {
		return findByHql(hql, new Object[] {});
	}

	@Override
	public T findByHql(String hql, Object parameter) {
		return findByHql(hql, new Object[] { parameter });
	}

	@SuppressWarnings("unchecked")
	@Override
	public T findByHql(String hql, Object[] parameters) {
		List<T> list = (List<T>) getHibernateTemplate().find(hql, parameters);
		if (list == null || list.size() == 0) {
			return null;
		} else {
			return list.get(0);
		}
	}

	@Override
	public List<T> findListByHql(String hql) {
		return findListByHql(hql, new Object[] {});
	}

	@Override
	public List<T> findListByHql(String hql, Object parameter) {
		return findListByHql(hql, new Object[] { parameter });
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<T> findListByHql(String hql, Object[] parameters) {
		return (List<T>) getHibernateTemplate().find(hql, parameters);
	}

	@Override
	public PageList<T> findPageListByHql(int currentPage, int pageSize,
			String hql) {
		return findPageListByHql(currentPage, pageSize, hql, new Object[] {});
	}

	@Override
	public PageList<T> findPageListByHql(int currentPage, int pageSize,
			String hql, Object parameter) {
		return findPageListByHql(currentPage, pageSize, hql,
				new Object[] { parameter });
	}

	@SuppressWarnings("unchecked")
	@Override
	public PageList<T> findPageListByHql(int currentPage, int pageSize,
			String hql, Object[] parameters) {

		String countHql = HqlUtils.getCountString(hql);

		List<T> countlist = (List<T>) getHibernateTemplate().find(countHql,
				parameters);

		int totalCount = Integer.parseInt(countlist.get(0).toString());

		Page page = new Page(totalCount, currentPage, pageSize);
		// 实际查询返回分页对象
		Query query = getSession().createQuery(hql);
		for (int i = 0; i < parameters.length; i++) {
			query.setParameter(i, parameters[i]);
		}

		// 如果当前页大于总页码，则当前页赋值为最大页码
		if (currentPage > page.getPageCount())
			currentPage = page.getPageCount();

		List<T> data = (List<T>) query.setFirstResult(
				page.getStartRowNumber() - 1).setMaxResults(pageSize).list();
		PageList<T> pl = new PageList<T>();
		pl.setData(data);
		pl.setPage(page);
		return pl;
	}

	@Override
	public int executeStoredProcedure(final String sql,
			final Object[] parameters) {
		return (Integer) getHibernateTemplate().execute(
				new HibernateCallback() {
					public Object doInHibernate(Session session) {
						SQLQuery query = session.createSQLQuery(sql);
						for (int i = 0; i < parameters.length; i++) {
							query.setParameter(i, parameters[i]);
						}
						return query.executeUpdate();
					}
				});
	}

	@Override
	public Object executeUniqueStoredProcedure(final String sql,
			final Object[] parameters) {
		return getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) {
				SQLQuery query = session.createSQLQuery(sql);
				for (int i = 0; i < parameters.length; i++) {
					query.setParameter(i, parameters[i]);
				}
				return query.uniqueResult();
			}
		});
	}

	@SuppressWarnings("unchecked")
	@Override
	public List executeListStoredProcedure(final String sql,final Object[] parameters) {
		return (List) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) {
				SQLQuery query = session.createSQLQuery(sql);
				if( parameters != null)
				{
					for (int i = 0; i < parameters.length; i++) {
						query.setParameter(i, parameters[i]);
					}
				}
				
				return query.list();
			}
		});
	}

	@SuppressWarnings("unchecked")
	@Override
	public List executeListStoredProcedure(final String sql,
			final String[] names, final Object[] values) {
		return (List) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) {
				SQLQuery query = session.createSQLQuery(sql);
				for (int i = 0; i < values.length; i++) {
					query.setParameter(names[i], values[i]);
				}
				return query.list();
			}
		});
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public T get(Criteria criteria) {
		StringBuilder sb = new StringBuilder();
		List<Object> values = new ArrayList<Object>();
		sb.append("SELECT ").append(criteria.getClassz().getSimpleName())
				.append(" ");
		HqlUtils.generateHqlByCriteria(criteria, sb, values);
		if (logger.isDebugEnabled()) {
			logger.debug("********" + sb.toString());
		}
		Session session = getSession();
		Query query = session.createQuery(sb.toString());
		if (values != null && !values.isEmpty()) {
		    for(int i = 0; i < values.size(); i++)
		    {
		        query.setParameter(i, values.get(i));
		    }
//			query.setProperties(values);
		}
		List<T> list = query.setFirstResult(0).setMaxResults(1).list();
		if (list == null || list.size() == 0)
			return null;
		else
			return list.get(0);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<T> list(Criteria criteria) {
		StringBuilder sb = new StringBuilder();
		List<Object> values = new ArrayList<Object>();
		sb.append("SELECT ").append(criteria.getClassz().getSimpleName())
				.append(" ");
		HqlUtils.generateHqlByCriteria(criteria, sb, values);
		if (logger.isDebugEnabled()) {
			logger.debug("********" + sb.toString());
		}
		return getHibernateTemplate().find(sb.toString(), values.toArray());
	}

	@SuppressWarnings("unchecked")
	public int getCount(Criteria criteria) {
		StringBuilder sb = new StringBuilder();
		List<Object> values = new ArrayList<Object>();
		sb.append("SELECT COUNT(*) ");
		HqlUtils.generateHqlByCriteria(criteria, sb, values);
		String countSql = sb.toString();
		int pos = sb.lastIndexOf("order by");
		if (pos > 0)
			countSql = countSql.substring(0, pos);
		if (logger.isDebugEnabled()) {
			logger.debug("********" + countSql);
		}
		List countlist = getHibernateTemplate()
				.find(countSql, values.toArray());
		int totalCount = Integer.parseInt(countlist.get(0).toString());
		return totalCount;
	}

	@SuppressWarnings("unchecked")
	public PageList<T> pageList(Criteria criteria, int currentPage, int pageSize) {
		// Page page = new Page(totalCount, currentPage, pageSize);
		// 实际查询返回分页对象
		StringBuilder sb = new StringBuilder();
		List<Object> values = new ArrayList<Object>();
		sb.append("SELECT ").append(criteria.getClassz().getSimpleName())
				.append(" ");
		HqlUtils.generateHqlByCriteria(criteria, sb, values);
		if (logger.isDebugEnabled()) {
			logger.debug("********" + sb.toString());
		}
		int totalCount = this.getCount(criteria);
		Query query = getSession().createQuery(sb.toString());
		for (int i = 0; i < values.size(); i++) {
			query.setParameter(i, values.get(i));
		}

		Page page = new Page(totalCount, currentPage, pageSize);
		// 如果当前页大于总页码，则当前页赋值为最大页码
		if (currentPage > page.getPageCount())
			currentPage = page.getPageCount();

		List<T> data = (List<T>) query.setFirstResult(
				(currentPage - 1) * pageSize).setMaxResults(pageSize).list();

		PageList<T> pl = new PageList<T>();
		pl.setData(data);
		pl.setPage(page);
		return pl;
	}
	
	
	/**
	 * 从缓存里读取列表
	 */
	@Override
	public List<T> findListByHqlFromCache(String hql) {
		return findListByHqlFromCache(hql, null);
	}

	/**
	 * 从缓存里读取列表
	 */
	@Override
	public List<T> findListByHqlFromCache(String hql, Object parameter) {
		return findListByHqlFromCache(hql, new Object[] { parameter });
	}

	/**
	 * 从缓存里读取列表
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<T> findListByHqlFromCache(final String hql,final Object parameters[]) {
		
		return (List<T>) this.getHibernateTemplate().execute( new HibernateCallback() {
			@Override
			public Object doInHibernate(Session session) throws HibernateException,
					SQLException {
				Query query = session.createQuery(hql);
				if (parameters != null) {
					for (int i = 0; i < parameters.length; i++) {
						query.setParameter(i, parameters[i]);
					}
				}
				Iterator<T> it = query.iterate();
				List<T> list = new ArrayList<T>();
				while (it.hasNext()) {
					list.add(it.next());
				}
				return list;
			}
		});
	}
	

	/**
	 * 
	 * SQL
	 * 
	 */
	public PageList<T> findPageListBySql(int currentPage, final int pageSize,
			final String sql,final String where, final String orderby,final List<Object> params) {
		StringBuffer fullSql = new StringBuffer(sql) ;
		if (where.length() > 0) {
			fullSql.append(" WHERE 1= 1 " + where);
		}
		if (orderby.length() > 0) {
			fullSql.append(" ORDER BY " + orderby);
		}
		return findPageListBySql(currentPage, pageSize, fullSql.toString(), params);
	}
	
	@SuppressWarnings("unchecked")
	private PageList<T> findPageListBySql(int currentPage, final int pageSize,final String sql,final List<Object> params){
		int totalCount = getCount(sql, params);
		final Page page = new Page(totalCount, currentPage, pageSize);
		// 如果当前页大于总页码，则当前页赋值为最大页码
		if (currentPage > page.getPageCount()){
			currentPage = page.getPageCount();
		}
	   final int offsetPosition = (currentPage - 1) * pageSize;
	   
	   return (PageList<T>) this.getHibernateTemplate().execute( new HibernateCallback() {
			@Override
			public Object doInHibernate(Session session) throws HibernateException,
					SQLException {
				SQLQuery sqlQuery = session.createSQLQuery(sql);
				sqlQuery.addEntity(entityClass);
				sqlQuery.setFirstResult(offsetPosition).setMaxResults(pageSize);
				for (int i = 0; i < params.size(); i++) {
					sqlQuery.setParameter(i, params.get(i));
				}
				List<T> data = sqlQuery.list();
				PageList<T> pageList = new PageList<T>();
				pageList.setPage(page);
				pageList.setData(data);
				return pageList;
			}
		});
	}

	private Integer getCount(final String sql, final List<Object> params) {
		return (Integer) this.getHibernateTemplate().execute( new HibernateCallback() {
			
			@Override
			public Object doInHibernate(Session session) throws HibernateException,
					SQLException {
				SQLQuery sqlQuery = session.createSQLQuery(
						HqlUtils.getCountString(sql.toString()));

				for (int i = 0; i < params.size(); i++) {
					sqlQuery.setParameter(i, params.get(i));
				}
				return Integer.parseInt(sqlQuery.uniqueResult().toString());
			}
		});
		
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<T> findListBySql(final String sql, final List<Object> params) {
		return (List<T>) this.getHibernateTemplate().execute( new HibernateCallback() {
			@Override
			public Object doInHibernate(Session session) throws HibernateException,
					SQLException {
				SQLQuery sqlQuery = session.createSQLQuery(sql);
				sqlQuery.addEntity(entityClass);
				if (CollectionUtils.isNotEmpty(params)) {
					for (int i = 0; i < params.size(); i++) {
						sqlQuery.setParameter(i, params.get(i));
					}
				}
				return sqlQuery.list();
			}
		});
		
	}

	@SuppressWarnings("unchecked")
	@Override
	public <E> PageList<E> findPageListByStoredProcedure(final int currentPage,final int pageSize,final String name,
			final List<Param> parameters,final Class<E> clazz) {		
		return (PageList<E>) this.getHibernateTemplate().execute( new HibernateCallback() {
			@SuppressWarnings("deprecation")
			@Override
			public Object doInHibernate(Session session) throws HibernateException,
					SQLException {
				Connection conn = session.connection();
				StringBuilder sql = new StringBuilder();
				sql.append(" exec ");
				sql.append(name);
				for (int i =0;i<parameters.size();i++) {
					if(i==0){
						sql.append(" @"+parameters.get(i).getParamName()+" = ? " );
					}else{
						sql.append(" ,@"+parameters.get(i).getParamName()+" = ? " );
					}
				}
				PreparedStatement ps =  conn.prepareStatement(sql.toString());
				
				for (int i = 1;i<=parameters.size();i++) {
					ps.setObject(i, transformParams(parameters.get(i-1)));
				}
 				long start = System.currentTimeMillis();
				ps.execute();
				long end = System.currentTimeMillis();
				logger.debug(sql + "*************"+(end-start)/1000f); 
				ResultSetMetaData rsmd = (ResultSetMetaData) ps.getMetaData();
				List<String> columnNames = new ArrayList<String>();
				 for (int i = 1; i < rsmd.getColumnCount() + 1; i++) {
					 columnNames.add(rsmd.getColumnName(i));
				 }
				List<E> data = new ArrayList<E>();
				int total = 0;
		        ResultSet _rs = ps.getResultSet();  
		        while (_rs != null && _rs.next()) {  
		        	data.add(copyProperty(_rs, clazz,columnNames));
		        }
			        
		        if(ps.getMoreResults()){      //检查是否存在更多结果集  
				    _rs = ps.getResultSet();
		        	 while(_rs != null && _rs.next()){
		        		 total = _rs.getInt(1);
		                 break;
		        	 }
			    }
				
				PageList<E> pageList = new PageList<E>();
				Page page = new Page(total, currentPage, pageSize);
			    pageList.setData(data);
			    pageList.setPage(page);
				return pageList;
			}
		});
	}
	
	protected Object transformParams(Param param){
		if(param.getParamType()==ParamType.DateTime || param.getParamValue() instanceof java.util.Date){
			return new java.sql.Timestamp(((java.util.Date)param.getParamValue()).getTime());
		}
		if(param.getParamValue() instanceof java.lang.String){
			return StringEscapeUtils.escapeSql(param.getParamValue().toString());
		}
		return param.getParamValue();
	}

	
  public <E> E copyProperty(ResultSet _rs,Class<E> clazz,List<String> columnNames){
	 Field[]  fields = clazz.getDeclaredFields();
	 E type = null;
     try {
		type = clazz.newInstance();
        for (Field field : fields) {
        	String propertyName = field.getName();
			String propertyType = field.getType().getName();
			//属性不在列里直接跳出
			if(!isColumnNameExists(propertyName, columnNames)){
				continue;
			}
        	Object columnValue= null;
        	if("java.lang.Integer".equals(propertyType)){
        		columnValue = _rs.getInt(propertyName);
        	} else if ("java.lang.String".equals(propertyType)){
        		columnValue = _rs.getString(propertyName);
        	}else{
        		columnValue = _rs.getObject(propertyName);
        	}
        	if(columnValue != null){
        		BeanUtils.copyProperty(type, propertyName, columnValue);
        	}
        }
    } catch (IllegalAccessException ex) {
    	//ex.printStackTrace();
    } catch (SQLException ex) {
    	//ex.printStackTrace();
    }catch (InvocationTargetException ex) {
    	//ex.printStackTrace();
    }catch (InstantiationException ex) {
    	//ex.printStackTrace();
    }
    return type;
  }
  
  private boolean isColumnNameExists(String propertyName,List<String> columnNames){
	  for (String columnName : columnNames) {
			if(columnName.equalsIgnoreCase(propertyName)){
				return true;
			}
		}
	  return false;
  }
	
	@SuppressWarnings("unchecked")
	@Override
	public <E> List<E> findListByStoredProcedure(final String name,
			final List<Param> parameters,final Class<E> clazz) {
		return (List<E>) this.getHibernateTemplate().execute( new HibernateCallback() {
			@SuppressWarnings("deprecation")
			@Override
			public Object doInHibernate(Session session) throws HibernateException,
					SQLException {
				Connection conn = session.connection();
				StringBuilder sql = new StringBuilder();
				sql.append(" exec ");
				sql.append(name);
				for (int i =0;i<parameters.size();i++) {
					if(i==0){
						sql.append(" @"+parameters.get(i).getParamName()+" = ? " );
					}else{
						sql.append(" ,@"+parameters.get(i).getParamName()+" = ? " );
					}
				}
				PreparedStatement ps =  conn.prepareStatement(sql.toString());
				
				for (int i = 1;i<=parameters.size();i++) {
					ps.setObject(i, transformParams(parameters.get(i-1)));
				}
				ps.execute();
				
				ResultSetMetaData rsmd = (ResultSetMetaData) ps.getMetaData();
				List<String> columnNames = new ArrayList<String>();
				 for (int i = 1; i < rsmd.getColumnCount() + 1; i++) {
					 columnNames.add(rsmd.getColumnName(i));
				 }
				List<E> data = new ArrayList<E>();
		        ResultSet _rs = ps.getResultSet();  
		        while (_rs != null && _rs.next()) {  
		        	data.add(copyProperty(_rs, clazz,columnNames));
		        } 
				return data;
			}
		});
	}
	
	@SuppressWarnings("unchecked")
    @Override
	public <E> List<E> findListBySql(final String sql, final List<Object> parameters, final Class<E> clazz)
	{
        return (List<E>) this.getHibernateTemplate().execute( new HibernateCallback() {
            @SuppressWarnings("deprecation")
            @Override
            public Object doInHibernate(Session session) throws HibernateException,
                    SQLException {
                Connection conn = session.connection();
                PreparedStatement ps =  conn.prepareStatement(sql);
                
                if (CollectionUtils.isNotEmpty(parameters)) {
                	for (int i = 1;i<=parameters.size();i++) {
                		ps.setObject(i, parameters.get(i - 1));
                	}
				}
                ps.execute();
                
                ResultSetMetaData rsmd = (ResultSetMetaData) ps.getMetaData();
                List<String> columnNames = new ArrayList<String>();
                 for (int i = 1; i < rsmd.getColumnCount() + 1; i++) {
                     columnNames.add(rsmd.getColumnName(i));
                 }
                List<E> data = new ArrayList<E>();
                ResultSet _rs = ps.getResultSet();  
                while (_rs != null && _rs.next()) {  
                    data.add(copyProperty(_rs, clazz,columnNames));
                } 
                return data;
            }
        });
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public  List<Integer> findListIntegerBySql(final String sql, final List<Object> parameters)
	{
        return (List<Integer>) this.getHibernateTemplate().execute( new HibernateCallback() {
            @SuppressWarnings("deprecation")
            @Override
            public Object doInHibernate(Session session) throws HibernateException,
                    SQLException {
                Connection conn = session.connection();
                PreparedStatement ps =  conn.prepareStatement(sql);
                
                if (CollectionUtils.isNotEmpty(parameters)) {
                	for (int i = 1;i<=parameters.size();i++) {
                		ps.setObject(i, parameters.get(i - 1));
                	}
				}
                ps.execute();
                
                ResultSetMetaData rsmd = (ResultSetMetaData) ps.getMetaData();
                List<String> columnNames = new ArrayList<String>();
                 for (int i = 1; i < rsmd.getColumnCount() + 1; i++) {
                     columnNames.add(rsmd.getColumnName(i));
                 }
                List<Integer> data = new ArrayList<Integer>();
                ResultSet _rs = ps.getResultSet();  
                while (_rs != null && _rs.next()) {  
                	data.add(_rs.getInt(1));
                } 
                return data;
            }
        });
	}
	
	@Override
	public Object uniqueResultByStoredProcedure(final String name,final List<Param> parameters) {
		return  this.getHibernateTemplate().execute( new HibernateCallback() {
			@SuppressWarnings("deprecation")
			@Override
			public Object doInHibernate(Session session) throws HibernateException,
					SQLException {
				Connection conn = session.connection();
				StringBuilder sql = new StringBuilder();
				sql.append(" exec ");
				sql.append(name);
				for (int i =0;i<parameters.size();i++) {
					if(i==0){
						sql.append(" @"+parameters.get(i).getParamName()+" = ? " );
					}else{
						sql.append(" ,@"+parameters.get(i).getParamName()+" = ? " );
					}
				}
				PreparedStatement ps =  conn.prepareStatement(sql.toString());
				
				for (int i = 1;i<=parameters.size();i++) {
					ps.setObject(i, transformParams(parameters.get(i-1)));
				}
				ps.execute();
				
		        ResultSet _rs = ps.getResultSet();  
		        while (_rs != null && _rs.next()) {  
		        	return  _rs.getObject(1);
		        } 
		        return null;
			}
		});
	}
	
	@Override
	public int execStoredProcedure(final String name,final List<Param> parameters) {
		return (Integer) this.getHibernateTemplate().execute( new HibernateCallback() {
			@SuppressWarnings("deprecation")
			@Override
			public Object doInHibernate(Session session)
					throws HibernateException, SQLException {
				Connection conn = session.connection();
				StringBuilder sql = new StringBuilder();
				sql.append(" exec ");
				sql.append(name);
				for (int i =0;i<parameters.size();i++) {
					if(i==0){
						sql.append(" @"+parameters.get(i).getParamName()+" = ? " );
					}else{
						sql.append(" ,@"+parameters.get(i).getParamName()+" = ? " );
					}
				}
				PreparedStatement ps =  conn.prepareStatement(sql.toString());
				for (int i = 1;i<=parameters.size();i++) {
					ps.setObject(i, transformParams(parameters.get(i-1)));
				}
				return ps.executeUpdate();
			}
		});
	} 
	
	public String execStoredProcedure4output(final String name,final List<Param> parameters) {
		return (String) this.getHibernateTemplate().execute( new HibernateCallback() {
			@SuppressWarnings("deprecation")
			@Override
			public Object doInHibernate(Session session)
					throws HibernateException, SQLException {
				Connection conn = session.connection();
				StringBuilder sql = new StringBuilder();
				sql.append(" exec ");
				sql.append(name);
				for (int i =0;i<parameters.size();i++) {
					if(i==0){
						sql.append(" @"+parameters.get(i).getParamName()+" = ? " );
					}else{
						sql.append(" ,@"+parameters.get(i).getParamName()+" = ? " );
					}
				}
				CallableStatement ps =  conn.prepareCall(sql.toString());
				for (int i = 1;i<=parameters.size();i++) {
					ps.setObject(i, transformParams(parameters.get(i-1)));
				}
				ps.registerOutParameter(parameters.size(), Types.VARCHAR);
				ps.executeUpdate();
				return ps.getObject(parameters.size());
			}
		});
	} 

}
