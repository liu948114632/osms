<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
	   default-autowire="byName" default-lazy-init="true">


	<import resource="classpath:hibernate.xml" />

		<!--class="com.itecheasy.common.util.EncryptPropertyPlaceholderConfigurer">-->
		<!-- class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
	<bean id="propertyConfigurer"
		  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:jdbc_sqlserver.properties</value>
				<value>classpath*:deploy_config.properties</value>
				<value>classpath*:autotask.properties</value>
				<value>classpath*:asynemail.properties</value>
			</list>
		</property>
	</bean>

	<!-- osms 客户端认证 -->
	<bean id="wss4jInInterceptor" class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">      
        <constructor-arg>         
             <map>
               <entry key="action" value="UsernameToken"/>
               <entry key="passwordType" value="PasswordText"/>
               <entry key="passwordCallbackClass" value="com.itecheasy.common.WsAuthHandler" />
            </map>
         </constructor-arg>
    </bean>
    <bean id="saajInInterceptor" class="org.apache.cxf.binding.soap.saaj.SAAJInInterceptor" />

<!-- 		class="org.springframework.orm.hibernate3.HibernateTransactionManager"> -->
	<bean id="txManager"
		class="com.itecheasy.communication.order.MyTransaction" >
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean 
		below) -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />

			<!--<tx:method name="syncAmozonStackReportTask" propagation="NOT_SUPPORTED" read-only="false"/>-->

	<!-- 		<tx:method name="com.itecheasy.core.task.ListOrderTaskServiceImpl.getOrders" propagation="SUPPORTS" />
			<tx:method name="com.itecheasy.core.AmazonOrderServiceImpl.addOrderByLog" propagation="SUPPORTS" />
			<tx:method name="com.itecheasy.core.AmazonOrderServiceImpl.addOrderAmazon" propagation="SUPPORTS" /> -->
		<!-- 	<tx:method name="addOrder" propagation="REQUIRES_NEW"/> -->
			<tx:method name="countOrderReportTaskNew" propagation="REQUIRES_NEW" />
			<tx:method name="getMerchandiserbyUserId" propagation="REQUIRES_NEW" read-only="false"/>
			<tx:method name="getUserByCMSUserId" propagation="REQUIRES_NEW" read-only="false"/>
			<tx:method name="countOrderReportTaskUpdate" propagation="REQUIRES_NEW" />
			<tx:method name="addEmail" propagation="REQUIRES_NEW" />
			<tx:method name="listOrderSimple" propagation="REQUIRES_NEW" />
			<tx:method name="syncCmsProductInfo" propagation="REQUIRES_NEW" />
			<tx:method name="syncReplenishmentTask" propagation="REQUIRES_NEW" />
			<!-- <tx:method name="addOrderSimple" propagation="REQUIRES_NEW" /> -->
			<tx:method name="*" propagation="REQUIRED" />
			<tx:method name="*" rollback-for="com.itecheasy.core.BussinessException" />
<!-- 			<tx:method name="listOrder" propagation="SUPPORTS" no-rollback-for="com.itecheasy.core.BussinessException"/>
			<tx:method name="updateTraceCode2Smt" propagation="SUPPORTS" no-rollback-for="java.lang.RuntimeException"/> -->
<!-- 			<tx:method name="syncOrders" propagation="SUPPORTS" no-rollback-for="com.itecheasy.core.BussinessException"/> -->
		</tx:attributes>
	</tx:advice> 	

	<!-- ensure that the above transactional advice runs for any execution of 
		an operation defined by the FooService interface -->

	<aop:config>
		<aop:pointcut id="all"
			expression="execution(* com.itecheasy.*.*.*ServiceImpl.*(..))" />
		<aop:pointcut id="autotask"
			expression="execution(* com.itecheasy.core.task.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="all" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="autotask" />
	</aop:config>

	<bean id="serviceMethodInterceptor" class="com.itecheasy.printMethod.AccessPath"/>
	<!--&lt;!&ndash; 方法拦截器（拦截Service包中的所有的方法） MethodInterceptor &ndash;&gt;-->
	<aop:config >
		<aop:pointcut id="serviceMethodPointcut"
					  expression="execution(* com.itecheasy.osms..*.*(..))"/>
		<aop:advisor advice-ref="serviceMethodInterceptor"
					 pointcut-ref="serviceMethodPointcut" />
	</aop:config>

	<!--用于打印日志的参数和返回值-->
	<!-- 方法拦截器   MethodInterceptor -->
	<!--<bean id="printLoggerInterceptor" class="com.itecheasy.printMethod.PrintLogger"/>-->
	<!--<aop:config>-->
		<!--<aop:pointcut id="printLoggerPointcut" expression="execution(* com.itecheasy.core.fba.AmazonReportServiceImpl.*(..)) and-->
		 	  <!--@annotation(com.itecheasy.printMethod.annotations.LoggerNameDescription)"/>-->
		<!--<aop:advisor advice-ref="printLoggerInterceptor" pointcut-ref="printLoggerPointcut" />-->
	<!--</aop:config>-->

	<!-- 用于打印日志的参数和返回值 -->
	<bean id="sysLogAspect" class="com.itecheasy.printMethod.LoggerNew"/>
	<aop:config>
		<aop:aspect ref="sysLogAspect">
			<aop:pointcut expression="execution(* com.itecheasy..*.*(..)) and
			 	@annotation(com.itecheasy.printMethod.annotations.LoggerNameDescription)" id="sysLogPointcut"/>
			<aop:around method="aroundLogger" pointcut-ref="sysLogPointcut" />
		</aop:aspect>
	</aop:config>



	<!--统一异常处理 proxy使用jdk-->
	<!--proxy-target-class="true" 与proxy-target-class="false"的区别：
        proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。
        如果proxy-target-class 属性值被设置为true，那么基于类的代理将起作用（这时需要cglib库）。
        如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理-->

	<!--<bean id="exceptionHandler" class="com.itecheasy.printMethod.ChinoException" />-->
	<!--<aop:config proxy-target-class="true">-->
		<!--<aop:aspect  ref="exceptionHandler">-->
			<!--<aop:pointcut id="exceptionService"  expression="execution(* com.itecheasy.core.order.*.*(..)) " />-->
			<!--<aop:after-throwing pointcut-ref="exceptionService"  method="afterThrowing3" throwing="e" />-->
		<!--</aop:aspect>-->
	<!--</aop:config>-->




<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

	<!--<import resource="classpath:webservice_bean.xml"/>-->
	<!--<import resource="classpath:webservice_cxf.xml"/>-->

	<import resource="classpath:service_core.xml"/>
	<import resource="classpath:service_job.xml"/>
	<import resource="classpath:dwr_core.xml"/>

	<import resource="classpath:communication_bean.xml"/>
	<import resource="classpath:communication_cxf.xml"/>
</beans>