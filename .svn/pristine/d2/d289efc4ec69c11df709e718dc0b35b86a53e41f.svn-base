package com.itecheasy.core.system;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.itecheasy.common.dao.Criteria;
import com.itecheasy.common.dao.Restriction;
import com.itecheasy.common.util.BeanUtils;
import com.itecheasy.common.util.CollectionUtils;
import com.itecheasy.common.util.DateUtils;
import com.itecheasy.core.CurrencyUtils;
import com.itecheasy.core.po.ConfigCMSPO;
import com.itecheasy.core.po.ConfigDMSPO;
import com.itecheasy.core.po.CountryPO;
import com.itecheasy.core.po.CurrencyPO;
import com.itecheasy.core.po.FBAShippingMethodPO;
import com.itecheasy.core.po.MerchandiserPO;
import com.itecheasy.core.po.ProductOperateLogPo;
import com.itecheasy.core.po.ShippingMethodPO;
import com.itecheasy.core.po.ShopDevInfoPO;
import com.itecheasy.core.po.ShopInfoPo;
import com.itecheasy.core.po.ShopPo;
import com.itecheasy.core.po.TemplateDetailPo;
import com.itecheasy.core.po.TemplatePo;
import com.itecheasy.core.po.UserPO;
import com.itecheasy.core.product.dao.ProductOperateLogDao;
import com.itecheasy.core.product.dao.TemplateDao;
import com.itecheasy.core.product.dao.TemplateDetailDao;
import com.itecheasy.core.system.ShippingMethod.ShippingMethodStatus;
import com.itecheasy.core.system.dao.ConfigCMSDao;
import com.itecheasy.core.system.dao.ConfigDMSDao;
import com.itecheasy.core.system.dao.CountryDao;
import com.itecheasy.core.system.dao.CurrencyDao;
import com.itecheasy.core.system.dao.FBAShippingMethodDao;
import com.itecheasy.core.system.dao.MerchandiserDao;
import com.itecheasy.core.system.dao.ShippingMethodDao;
import com.itecheasy.core.system.dao.ShopDao;
import com.itecheasy.core.system.dao.ShopDevInfoDao;
import com.itecheasy.core.system.dao.ShopInfoDao;
import com.itecheasy.core.user.ProfileService;
import com.itecheasy.core.user.User;
import com.itecheasy.core.user.dao.UserDAO;
import com.itecheasy.core.util.StaticUtils;
import com.itecheasy.webservice.aliexpress.AliexpressConfigInfo;
import com.itecheasy.webservice.client.CMSClient;
import com.itecheasy.webservice.client.EbayApiAccount;
import com.itecheasy.webservice.dms.AccountSetting;

/**
 * @author wanghw
 * @date 2015-3-26
 * @description TODO
 * @version
 */
public class SystemServiceImpl extends CurrencyExchangeRateServiceImpl implements SystemService {
	private static final String SHOP_SHIPPINGMETHOD_OTHER = "Other";
	private List<ShopDevInfo> shopDevInfos;
	private List<SettingReimbursePercent> settingReimbursePercentList;
	private Map<Integer, List<Integer>> shopIdsByDevId;
	protected ShopDao shopDao;
	protected ShopInfoDao shopInfoDao;
	protected ProductOperateLogDao productOperateLogDao;
	protected TemplateDetailDao templateDetailDao;
	protected TemplateDao templateDao;
	protected CurrencyDao currencyDao;
	protected CountryDao countryDao;
	protected ShippingMethodDao shippingMethodDao;
	protected MerchandiserDao merchandiserDao;
	protected ConfigCMSDao configCMSDao;
	protected ConfigDMSDao configDMSDao;
	protected UserDAO userDAO;
	private ShopDevInfoDao shopDevInfoDao;
	private ProfileService profileService;
	
	public void initialize(){
		shopInfoDao.setInfoPos(BeanUtils.copyList(shopInfoDao.getAll(),ShopInfo.class));
		this.shopDevInfos=getAllAccount();
		shopDao.setShops(this.getEnableShops());
		shopIdsByDevId=setShopIdsByDevId();
		settingReimbursePercentList=getSettingReimbursePercents();
	}
	
	private Map<Integer, List<Integer>> setShopIdsByDevId(){
		Map<Integer, List<Integer>> _map=new HashMap<Integer, List<Integer>>();
		for (Shop shop : this.getEnableShops()) {
			if(!_map.containsKey(shop.getShopDevInfoId())){
				List<Integer> _list=new ArrayList<Integer>();
				_map.put(shop.getShopDevInfoId(), _list);
			}
			_map.get(shop.getShopDevInfoId()).add(shop.getId());
		}
		return _map;
	}
	
	
	
	@Override
	public SettingReimbursePercent getCacheSettingReimbursePercentByShippingMethod(int shippingMethod) {
		if(CollectionUtils.isNotEmpty(settingReimbursePercentList)){
			for (SettingReimbursePercent set : settingReimbursePercentList) {
				if(shippingMethod==set.getShippingMethod()){
					return set;
				}
			}
		}
		return null;
	}
	
	@Override
	public List<SettingReimbursePercent> getSettingReimbursePercents() {
		if(CollectionUtils.isNotEmpty(settingReimbursePercentList)){
			return settingReimbursePercentList;
		}
		String sql="SELECT * FROM dbo.setting_reimburse_percent";
		return userDAO.findListBySql(sql, null, SettingReimbursePercent.class);
	}
	
	@Override
	public ShopInfo getCacheShopInfo(int shopId) {
		for (ShopInfo info : shopInfoDao.getInfoPos()) {
			if(info.getShopId()==shopId)
				return info;
		}
		return null;
	}
	
	public ShopDevInfo getCacheAccount(int shopId){
		for (Shop shop : shopDao.getShops()) {
			if(shop.getId()==shopId){
				for (ShopDevInfo info : shopDevInfos) {
					if (shop.getShopDevInfoId()==info.getId()) {
						return info;
					}
				}
			}
		}
		
		return null;
	}
	
	@Override
	public List<ShopDevInfo> getCacheShopDevInfos() {
		return this.shopDevInfos;
	}
	
	@Override
	public List<Shop> getCacheShopsByDevAccount(int devId){
		List<Shop> _shop=new ArrayList<Shop>();
		for (Shop shop : shopDao.getShops()) {
			if(shop.getShopDevInfoId()!=null&&shop.getShopDevInfoId()==devId){
				_shop.add(shop);
			}
		}
		return _shop;
	}
	
	public List<Integer> getCacheShopIdsByDevAccount(int devId){
		return this.shopIdsByDevId.get(devId);
	}
	
	@Override
	public List<Shop> getCacheShopsByType(int shopType) {
		List<Shop> _shop=new ArrayList<Shop>();
		for (Shop shop : shopDao.getShops()) {
			if(shop.getType()==shopType){
				_shop.add(shop);
			}
		}
		return _shop;
	}
	
	private List<ShopDevInfo> getAllAccount() {
		List<ShopDevInfoPO> pos = shopDevInfoDao.getAll();
		if (CollectionUtils.isNotEmpty(pos)) {
			return BeanUtils.copyList(pos, ShopDevInfo.class);
		}
		return null;
	}

	public void setProfileService(ProfileService profileService) {
		this.profileService = profileService;
	}

	public void setShopDevInfoDao(ShopDevInfoDao shopDevInfoDao) {
		this.shopDevInfoDao = shopDevInfoDao;
	}

	public void setUserDAO(UserDAO userDAO) {
		this.userDAO = userDAO;
	}

	public void setConfigCMSDao(ConfigCMSDao configCMSDao) {
		this.configCMSDao = configCMSDao;
	}

	public void setConfigDMSDao(ConfigDMSDao configDMSDao) {
		this.configDMSDao = configDMSDao;
	}

	public void setMerchandiserDao(MerchandiserDao merchandiserDao) {
		this.merchandiserDao = merchandiserDao;
	}

	public void setShippingMethodDao(ShippingMethodDao shippingMethodDao) {
		this.shippingMethodDao = shippingMethodDao;
	}

	public void setCountryDao(CountryDao countryDao) {
		this.countryDao = countryDao;
	}

	public void setCurrencyDao(CurrencyDao currencyDao) {
		this.currencyDao = currencyDao;
	}

	public void setTemplateDao(TemplateDao templateDao) {
		this.templateDao = templateDao;
	}

	public void setTemplateDetailDao(TemplateDetailDao templateDetailDao) {
		this.templateDetailDao = templateDetailDao;
	}

	public void setProductOperateLogDao(ProductOperateLogDao productOperateLogDao) {
		this.productOperateLogDao = productOperateLogDao;
	}

	public void setShopInfoDao(ShopInfoDao shopInfoDao) {
		this.shopInfoDao = shopInfoDao;
	}

	public void setShopDao(ShopDao shopDao) {
		this.shopDao = shopDao;
	}

	@Override
	public ShopInfo getShopInfo(int shopId) {
		ShopInfoPo po = getShopInfoPo(shopId);
		if (po != null)
			return BeanUtils.copyProperties(po, ShopInfo.class);
		return null;
	}

	@Override
	public List<Shop> getNotPauseAndEnableShops() {
		return shopDao.getNotPauseAndEnableShops();
	}

	@Override
	public List<Shop> getShops() {
		List<ShopPo> pos = shopDao.getAll();
		if (CollectionUtils.isNotEmpty(pos)) {
			return BeanUtils.copyList(pos, Shop.class);
		}
		return null;
	}

	@Override
	public List<Shop> getEnableShops() {
		return shopDao.getEnableShops();
	}

	@Override
	public Shop getShop(int shopId) {
		ShopPo po = shopDao.getObject(shopId);
		if (po != null)
			return BeanUtils.copyProperties(po, Shop.class);
		return null;
	}

	@Override
	public void setLastUpdateTime(int devId, Date lastUpdateTime) {
		ShopDevInfoPO po = shopDevInfoDao.getObject(devId);
		if (po != null) {
			po.setLastUpdatedAfter(lastUpdateTime);
			this.shopDevInfoDao.updateObject(po);
		}
	}

	@Override
	public List<Shop> getShopsByUserId(int userId) {
		String hql = "select s from ShopPo s ,UserShopPo u where s.id=u.shopId and u.userId=?";
		List<ShopPo> pos = shopDao.findListByHql(hql, userId);
		if (CollectionUtils.isNotEmpty(pos))
			return BeanUtils.copyList(pos, Shop.class);
		return null;
	}

	@Override
	public List<User> getUsersByShopId(int shopId) {
		String hql = "select s from UserPO s ,UserShopPo u where s.id=u.userId and u.shopId=?";
		List<UserPO> pos = userDAO.findListByHql(hql, shopId);
		if (CollectionUtils.isNotEmpty(pos)) {
			return BeanUtils.copyList(pos, User.class);
		}
		return null;
	}

	@Override
	public List<String> getProductTypeByshopId(int shopId) {
		ShopInfoPo po = getShopInfoPo(shopId);
		if (po != null) {
			String[] s = StringUtils.split(po.getProductType(), "|");
			return CollectionUtils.arrayToList(s);
		}
		return null;
	}

	private ShopInfoPo getShopInfoPo(int shopId) {
		String hql="from ShopInfoPo where shopId=?";
		return shopInfoDao.findByHql(hql, shopId);
	}

	public void autoAddBrowesNode(int shopId, String browesNode) {
		if (StringUtils.isEmpty(browesNode))
			return;
		ShopInfoPo po = getShopInfoPo(shopId);
		if (po != null) {
			if (StringUtils.isNotEmpty(po.getBrowseNode())) {
				String[] nodes = StringUtils.split(po.getBrowseNode(), "||");
				if (!CollectionUtils.arrayToList(nodes).contains(browesNode))
					po.setBrowseNode(po.getBrowseNode() + "||" + browesNode);
			} else {
				po.setBrowseNode(browesNode);
			}

			shopInfoDao.mergeObject(po);
		}
	}

	public void autoAddProductType(int shopId, String ProductType) {
		if (StringUtils.isEmpty(ProductType))
			return;
		ShopInfoPo po = getShopInfoPo(shopId);
		if (po != null) {
			if (StringUtils.isNotEmpty(po.getProductType())) {
				String[] types = StringUtils.split(po.getProductType(), "||");
				if (!CollectionUtils.arrayToList(types).contains(ProductType))
					po.setProductType(po.getProductType() + "||" + ProductType);
			} else {
				po.setProductType(ProductType);
			}

			shopInfoDao.mergeObject(po);
		}
	}

	@Override
	public List<String> getBrowesNodeByshopId(int shopId) {
		ShopInfoPo po = getShopInfoPo(shopId);
		if (po != null) {
			String[] s = StringUtils.split(po.getBrowseNode(), "||");
			return CollectionUtils.arrayToList(s);
		}
		return null;
	}

	@Override
	public void addProductOperatorLog(int type, Integer objId, String remark, int operator) {
		ProductOperateLogPo po = new ProductOperateLogPo();
		po.setType(type);
		po.setTime(DateUtils.getFullMillisecondDate());
		po.setObjId(objId);
		po.setRemark(remark);
		po.setOperator(operator);

		productOperateLogDao.addObject(po);
	}

	/********************************* CMS ***************************************/

	@Override
	public List<Category> getAllCategory() {
		return CMSClient.getAllCategory();
	}

	@Override
	public List<Category> getRootCategory() {
		return CMSClient.getRootCategory();
	}

	@Override
	public Category getCategoryById(int cateId) {
		return CMSClient.getCategoryById(cateId);
	}

	@Override
	public List<Category> getCategoryByParentId(int parentId) {
		return CMSClient.getCategoryByParentId(parentId);
	}

	@Override
	public List<Property> getPropertyByCategoryId(int cateId) {
		return CMSClient.getPropertyByCategoryId(cateId);
	}

	@Override
	public List<Property> getPropertyByCategoryIds(List<Integer> cateIds) {
		return CMSClient.getPropertyByCategoryIds(cateIds);
	}

	@Override
	public Property getPropertyById(int propertyId) {
		return CMSClient.getPropertyById(propertyId);
	}

	@Override
	public PropertyValue getPropertyValueById(int propertyValueId) {
		return CMSClient.getPropertyValueById(propertyValueId);
	}

	@Override
	public List<CategorySeries> getCategorySeriesByCategory(int categoryId) {
		return CMSClient.getCategorySeriesByCategroyId(categoryId);
	}

	/********************************* CMS ***************************************/

	@Override
	public List<TemplateDetial> getTemplateDetials(int templateId) {
		String hql = "from TemplateDetailPo where templateId=? order by sort asc";
		List<TemplateDetailPo> pos = templateDetailDao.findListByHql(hql, templateId);
		if (CollectionUtils.isNotEmpty(pos)) {
			return BeanUtils.copyList(pos, TemplateDetial.class);
		}
		return null;
	}

	@Override
	public List<Template> getTemplates() {
		List<TemplatePo> pos = templateDao.getAll();
		if (CollectionUtils.isNotEmpty(pos)) {
			return BeanUtils.copyList(pos, Template.class);
		}
		return null;
	}

	// ----------------------------------------ShippingMethod--------------------------------------------//

	@Override
	public List<ShippingMethod> getAllShippingMethod() {
		String hql = "from ShippingMethodPO where status=?";
		List<ShippingMethodPO> pos = shippingMethodDao.findListByHql(hql, ShippingMethodStatus.ENABLE);
		if (CollectionUtils.isNotEmpty(pos)) {
			return BeanUtils.copyList(pos, ShippingMethod.class);
		}
		return null;
	}

	public List<ShippingMethod> getAllShippingMethod4Amazon() {
		String sql = " SELECT s.* FROM dbo.shipping_method s INNER JOIN dbo.am_shipping_method a ON s.id=a.shippingMethod";
		List<ShippingMethodPO> pos = shippingMethodDao.findListBySql(sql, null);
		if (CollectionUtils.isNotEmpty(pos)) {
			return BeanUtils.copyList(pos, ShippingMethod.class);
		}
		return null;
	}
	
	public List<ShippingMethod> getAllShippingMethod4Smt() {
		String sql = " SELECT s.* FROM dbo.shipping_method s INNER JOIN dbo.smt_shipping_method a ON s.id=a.shippingMethod";
		List<ShippingMethodPO> pos = shippingMethodDao.findListBySql(sql, null);
		if (CollectionUtils.isNotEmpty(pos)) {
			return BeanUtils.copyList(pos, ShippingMethod.class);
		}
		return null;
	}

	@Override
	public AmazonShippingMethod getAmazonShippingMethod(int shippingMethod) {
		String sql = "SELECT shippingMethod , carrierCode , carrierName  FROM dbo.am_shipping_method WHERE shippingMethod="
				+ shippingMethod;
		List<AmazonShippingMethod> methods = shopDao.findListBySql(sql, null, AmazonShippingMethod.class);
		if (CollectionUtils.isNotEmpty(methods)) {
			return methods.get(0);
		}
		return null;
	}

	@Override
	public ShippingMethod getShippingMethod(int id) {
		ShippingMethodPO po = shippingMethodDao.getObject(id);
		if (po != null) {
			return BeanUtils.copyProperties(po, ShippingMethod.class);
		}
		return null;
	}

	// ----------------------------------------ShippingMethod--------------------------------------------//

	@Override
	public List<Country> getAllCountrys() {
		List<CountryPO> pos = countryDao.getAll();
		if (CollectionUtils.isNotEmpty(pos)) {
			return BeanUtils.copyList(pos, Country.class);
		}
		return null;
	}

	@Override
	public List<Currency> getAllCurrency() {
		List<CurrencyPO> pos = currencyDao.getAll();
		if (CollectionUtils.isNotEmpty(pos)) {
			return BeanUtils.copyList(pos, Currency.class);
		}
		return null;
	}

	public BigDecimal convert2USD(BigDecimal amaount, int currency) {
		return this.exchangeCurrency2Other(currency, amaount, CurrencyUtils.USD);
	}

	@Override
	public Currency getCurrencyByCode(String code) {
		Criteria criteria = new Criteria(CurrencyPO.class);
		criteria.and(Restriction.eq("code", code));
		CurrencyPO po = currencyDao.get(criteria);
		if (po != null) {
			return BeanUtils.copyProperties(po, Currency.class);
		}
		return null;
	}

	@Override
	public Currency getCurrency(int id) {
		CurrencyPO po = currencyDao.getObject(id);
		if (po != null) {
			return BeanUtils.copyProperties(po, Currency.class);
		}
		return null;
	}

	@Override
	public Country getCountryByCode(String code) {
		Criteria criteria = new Criteria(CountryPO.class);
		criteria.and(Restriction.eq("countryCode", code));
		CountryPO po = countryDao.get(criteria);
		if (po != null) {
			return BeanUtils.copyProperties(po, Country.class);
		}
		return getCountryExtend(code);
	}
	
	private Country getCountryExtend(String code){
		String sql="SELECT c.* FROM dbo.country c INNER JOIN dbo.country_extend  ON c.id=countryId WHERE extend_code=?";
		List<Object> params=new ArrayList<Object>();
		params.add(code);
		List<CountryPO> cs=countryDao.findListBySql(sql, params);
		if(CollectionUtils.isNotEmpty(cs)){
			return BeanUtils.copyProperties(cs.get(0), Country.class);
		}
		return null;
	}

	@Override
	public Merchandiser getMerchandiserById(int merchandiserId) {
		String sql="SELECT * FROM dbo.merchandiser WITH(NOLOCK) WHERE id="+merchandiserId;
		List<MerchandiserPO> pos = merchandiserDao.findListBySql(sql, null);
		if(CollectionUtils.isNotEmpty(pos)){
			return BeanUtils.copyProperties(pos.get(0), Merchandiser.class);
		}
		return null;
	}
	
	@Override
	public Merchandiser getMerchandiserByCode(String userCode){
		String hql="from MerchandiserPO where code=?";
		MerchandiserPO po=merchandiserDao.findByHql(hql, userCode);
		return BeanUtils.copyProperties(po, Merchandiser.class);
	}
	
	public Merchandiser newCmsUserInfo(String userCode){
		Merchandiser m=getMerchandiserByCode(userCode);
		if(m==null){
			com.itecheasy.webservice.cms.User cmsuser=CMSClient.getUserByCode(userCode);
			MerchandiserPO po = addMerchandiser(cmsuser);
			BeanUtils.copyProperties(po, m);
		}
		return m;
	}

	private MerchandiserPO addMerchandiser(com.itecheasy.webservice.cms.User cmsuser) {
		MerchandiserPO po = new MerchandiserPO();
		po.setMerchandiserEmail(cmsuser.getEmail());
		po.setMerchandiserName(cmsuser.getName());
		po.setId(cmsuser.getId());
		po.setCode(cmsuser.getCode());
		merchandiserDao.addObject(po);
		return po;
	}
	
	public Merchandiser getMerchandiserbyUserId(int userId){
		User u=profileService.getUserByID(userId);
		return newCmsUserInfo(u.getCode());
	}
	
	public User getUserByCMSUserId(int cmsUserId){
		MerchandiserPO po = merchandiserDao.getObject(cmsUserId);
		if (po == null) {
			com.itecheasy.webservice.cms.User cmsuse=CMSClient.getUserbyId(cmsUserId);
			po = addMerchandiser(cmsuse);
		}
		User u=profileService.getUserByCode(po.getCode());
		if(u==null){
			int uId=profileService.addUser(po.getCode(),true);
			u=profileService.getUserByID(uId);
		}
		return u;
	}

	public boolean isTheSamePerson(int merchandiserId,int userId){
		MerchandiserPO po = merchandiserDao.getObject(merchandiserId);
		User user= profileService.getUserByID(userId);
		if(user.getCode().equalsIgnoreCase(po.getCode())){
			return true;
		}
		return false;
	}

	/** -------------------config------------------------ */
	@Override
	public String convertToDmsDepartment(int orderSource) {
		Criteria criteria = new Criteria(ConfigDMSPO.class);
		criteria.and(Restriction.eq("orderSource", orderSource));//武汉
		ConfigDMSPO dmspo = configDMSDao.get(criteria);
		if (dmspo != null) {
			return dmspo.getDept();
		}
		return "WH-AM-osms";
	}

	@Override
	public AccountSetting getAccountSetting(int orderSource) {
		Criteria criteria = new Criteria(ConfigDMSPO.class);
		criteria.and(Restriction.eq("orderSource", orderSource));
		ConfigDMSPO dmspo = configDMSDao.get(criteria);
		AccountSetting accountSetting = new AccountSetting();
		if (dmspo != null) {
			accountSetting.setAccountNumber(dmspo.getAccountNumber());
			accountSetting.setSignature(dmspo.getSignature());
		}
		return accountSetting;
	}

	@Override
	public int getCMSBussisType(int shopSource) {
		Criteria criteria = new Criteria(ConfigCMSPO.class);
		criteria.and(Restriction.eq("shopSource", shopSource));
		ConfigCMSPO po = configCMSDao.get(criteria);
		if (po != null) {
			return po.getCmsBussiType();
		}
		return 1;
	}

	/** -------------------config------------------------ */
	private FBAShippingMethodDao fbaShippingMethodDao;

	public void setFbaShippingMethodDao(FBAShippingMethodDao fbaShippingMethodDao) {
		this.fbaShippingMethodDao = fbaShippingMethodDao;
	}

	@Override
	public void addFBAShippingMethod(String shippingMethodOfFBA) {
		Criteria criteria = new Criteria(FBAShippingMethodPO.class);
		criteria.and(Restriction.eq("name", shippingMethodOfFBA));
		FBAShippingMethodPO po = fbaShippingMethodDao.get(criteria);
		if (po == null) {
			po = new FBAShippingMethodPO();
			po.setName(shippingMethodOfFBA);
			fbaShippingMethodDao.addObject(po);
		}
	}

	@Override
	public List<String> getShippingMethodOfFBA() {
		List<FBAShippingMethodPO> ss = fbaShippingMethodDao.getAll();
		if (CollectionUtils.isNotEmpty(ss)) {
			List<String> result = new ArrayList<String>();
			for (FBAShippingMethodPO shippingMethodOfFBA : ss) {
				result.add(shippingMethodOfFBA.getName());
			}
			return result;
		}
		return null;
	}

	@Override
	public String getFranceRegionByPostcode(String Postcode) {
		if (Postcode == null || Postcode.length() < 2) {
			return null;
		}
		String sql = " SELECT * FROM dbo.france_region_config WHERE postal_code_key=? ";

		List<FranceRegionConfig> configs = configDMSDao.findListBySql(sql,
				Arrays.asList(new Object[] { Postcode.substring(0, 2) }), FranceRegionConfig.class);
		if (CollectionUtils.isNotEmpty(configs)) {
			return configs.get(0).getRegion_value();
		}
		return null;
	}

	public List<SpecialPhonetic> getSpecialPhonetics() {
		String sql = "SELECT * FROM dbo.special_phonetic";
		return configDMSDao.findListBySql(sql, null, SpecialPhonetic.class);
	}
	
	
	
	@Override
	public String getEbayCountryCode(String country) {
		String sql="SELECT code as countryCode,full_name as englishName FROM dbo.ebay_country WHERE full_name=?";
		List<Object> params=new ArrayList<Object>();
		params.add(country);
		List<Country> cs=countryDao.findListBySql(sql, params,Country.class);
		if(CollectionUtils.isNotEmpty(cs)){
			return cs.get(0).getCountryCode();
		}
		return null;
	}
	
	public EbayApiAccount getEbayApiAccount(int shopId){
		ShopDevInfo info=this.getCacheAccount(shopId);
		EbayApiAccount eAccount=new EbayApiAccount();
		if(info!=null){
			eAccount=StaticUtils.convertEbayApiAccount(info);
//			eAccount.setDeveloper(info.getDeveloperID());
//			eAccount.setCertificate(info.getCertificateID());
//			eAccount.setSite(info.getMarketplaceID());
//			eAccount.setToken(info.getToken());
//			eAccount.setApplication(info.getApplicationID());
//			eAccount.setEpsServerUrl(DeployProperties.getInstance().getProperty("ebay.EpsServerUrl"));
//			eAccount.setServerUrl(DeployProperties.getInstance().getProperty("ebay.ServerUrl"));
//			eAccount.setSignInUrl(DeployProperties.getInstance().getProperty("ebay.SignInUrl"));
		}
		return eAccount;
	}
	
	
	public String getEbayShippingMethod(int shippingMethod){
		String sql = "SELECT shippingMethod , carrierCode , carrierName  FROM dbo.ebay_shipping_method WHERE shippingMethod="
				+ shippingMethod;
		List<AmazonShippingMethod> methods = shopDao.findListBySql(sql, null, AmazonShippingMethod.class);
		if (CollectionUtils.isNotEmpty(methods)) {
			return methods.get(0).getCarrierCode();
		}
		return SHOP_SHIPPINGMETHOD_OTHER;
	}
	
	public AliexpressConfigInfo getAliexpressConfigInfo(int shopId){
		ShopDevInfo info=this.getCacheAccount(shopId);
		return StaticUtils.convertAliexpressConfigInfo(info);
	}
	
	public String getSmtShippingMethod(int shippingMethod){
		String sql = "SELECT shippingMethod , carrierCode , carrierName  FROM dbo.smt_shipping_method WHERE shippingMethod="
				+ shippingMethod;
		List<AmazonShippingMethod> methods = shopDao.findListBySql(sql, null, AmazonShippingMethod.class);
		if (CollectionUtils.isNotEmpty(methods)) {
			return methods.get(0).getCarrierCode();
		}
		return SHOP_SHIPPINGMETHOD_OTHER;
	}
	
	
	@Override
	public List<ShopDevInfo> getAllShopExpiredTokens() {
		Date currenTime = DateUtils.getFullMillisecondDate();
		GregorianCalendar gc = new GregorianCalendar();
		gc.setTime(currenTime);
		gc.add(GregorianCalendar.DAY_OF_YEAR, 29);
		String hql = "from ShopDevInfoPO where tokenTimeout<=? and type=3";
		List<ShopDevInfoPO> pos = shopDevInfoDao.findListByHql(hql, new Date(gc.getTimeInMillis()));
		return BeanUtils.copyList(pos, ShopDevInfo.class);
	}
	
	@Override
	public List<OrderSource> getOrderSource(int shopType) {
		String sql="SELECT id ,  name ,  shop_type AS shopType FROM dbo.order_source WHERE shop_type=?";
		return shopDao.findListBySql(sql, Arrays.asList(new Object[] { shopType}), OrderSource.class);
	}
	
	@Override
	public List<ShopType> getShopTypes() {
		String sql="SELECT * FROM dbo.shop_type";
		return shopDao.findListBySql(sql, null,ShopType.class);
	}
}

