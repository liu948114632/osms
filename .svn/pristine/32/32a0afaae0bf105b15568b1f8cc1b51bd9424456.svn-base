/*
 * Copyright (c) 2018. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
 * Morbi non lorem porttitor neque feugiat blandit. Ut vitae ipsum eget quam lacinia accumsan.
 * Etiam sed turpis ac ipsum condimentum fringilla. Maecenas magna.
 * Proin dapibus sapien vel ante. Aliquam erat volutpat. Pellentesque sagittis ligula eget metus.
 * Vestibulum commodo. Ut rhoncus gravida arcu.
 */

package com.itecheasy.core.fba.report;

import com.itecheasy.core.fba.dao.AmazonInventoryAgedReportDao;
import com.itecheasy.core.fba.dao.AmazonInventoryAgedReportHistoryDao;
import com.itecheasy.core.po.AmazonInventoryAgedReportPO;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * @Auther: liteng
 * @Date: 2018/7/2 14:05
 * @Description:
 */
public class OnlyThan180DayAgedItemFilterComponent implements CountAgedItemReportComponent {

    private AmazonInventoryAgedReportDao amazonInventoryAgedReportDao;

    //库龄历史表
    private AmazonInventoryAgedReportHistoryDao amazonInventoryAgedReportHistoryDao;
    private CountAgedItemReportComponent countAgedItemReportComponent;
    private ThreadLocal<Integer> shopIdThreadLocal;

    public OnlyThan180DayAgedItemFilterComponent(CountAgedItemReportComponent component, ThreadLocal<Integer> shopIdThreadLocal,
                                                 AmazonInventoryAgedReportDao amazonInventoryAgedReportDao,
                                                 AmazonInventoryAgedReportHistoryDao amazonInventoryAgedReportHistoryDao) {
        this.shopIdThreadLocal = shopIdThreadLocal;
        this.countAgedItemReportComponent = component;
        this.amazonInventoryAgedReportDao = amazonInventoryAgedReportDao;
        this.amazonInventoryAgedReportHistoryDao = amazonInventoryAgedReportHistoryDao;
    }

    public OnlyThan180DayAgedItemFilterComponent() {
    }

    public OnlyThan180DayAgedItemFilterComponent(CountAgedItemReportComponent component) {
        this.countAgedItemReportComponent = component;
    }

    public OnlyThan180DayAgedItemFilterComponent(CountAgedItemReportComponent component, ThreadLocal<Integer> longLocal) {
        this.shopIdThreadLocal = longLocal;
        this.countAgedItemReportComponent = component;

    }

    public void setAmazonInventoryAgedReportHistoryDao(AmazonInventoryAgedReportHistoryDao amazonInventoryAgedReportHistoryDao) {
        this.amazonInventoryAgedReportHistoryDao = amazonInventoryAgedReportHistoryDao;
    }

    public void setCountAgedItemReportComponent(CountAgedItemReportComponent countAgedItemReportComponent) {
        this.countAgedItemReportComponent = countAgedItemReportComponent;
    }

    public void setShopIdThreadLocal(ThreadLocal<Integer> shopIdThreadLocal) {
        this.shopIdThreadLocal = shopIdThreadLocal;
    }

    public void setAmazonInventoryAgedReportDao(AmazonInventoryAgedReportDao amazonInventoryAgedReportDao, CountAgedItemReportComponent component) {
        this.amazonInventoryAgedReportDao = amazonInventoryAgedReportDao;
    }

    public void setAmazonInventoryAgedReportDao(AmazonInventoryAgedReportDao amazonInventoryAgedReportDao) {
        this.amazonInventoryAgedReportDao = amazonInventoryAgedReportDao;
    }

    public List<AmazonInventoryAgedReportPO> isEntrust(List<AmazonInventoryAgedReportPO> items, CountAgedItemReportComponent component) throws ParseException {
        if (component != null) {
            component.cost(items);
        }
        return items;
    }

    /**
     * step4
     * 如果该商品的库龄仅仅大于180
     * 如果不是的话 就把起始时间改为服务器当前时间
     *
     * @param
     * @return
     */
    @Override
    public List<AmazonInventoryAgedReportPO> cost(List<AmazonInventoryAgedReportPO> syncItemUpdateYesterday) throws ParseException {

        //更新日期是昨天的  单独抽为component
        List<AmazonInventoryAgedReportPO> calculateYesterdayUpdateContent = calculateYesterdayUpdateContent(syncItemUpdateYesterday);

        //dataBaseResult 中这个商店下所有的
        List<AmazonInventoryAgedReportPO> daoStockReportList = amazonInventoryAgedReportDao.findListByHql
                ("FROM AmazonInventoryAgedReportPO WHERE shopId=? ", new Object[]{shopIdThreadLocal.get()});
//        amazonInventoryAgedReportDao.updateDataById(calculateYesterdayUpdateContent,daoStockReportList);


        //仅库龄大于180天的商品这个条件的商品
        List<AmazonInventoryAgedReportPO> satisfiedConditionItems = new ArrayList<AmazonInventoryAgedReportPO>();
        //非仅库龄大于180天的商品这个条件的商品
        List<AmazonInventoryAgedReportPO> notSatisfiedConditionItems = new ArrayList<AmazonInventoryAgedReportPO>();

        for (AmazonInventoryAgedReportPO agedItem : calculateYesterdayUpdateContent) {
            BigDecimal invAge0To90Days = agedItem.getInvAge0To90Days();
            BigDecimal invAge91To180Days = agedItem.getInvAge91To180Days();
            BigDecimal invAge181To270Days = agedItem.getInvAge181To270Days();
            BigDecimal invAge271To365Days = agedItem.getInvAge271To365Days();
            BigDecimal invAge365PlusDays = agedItem.getInvAge365PlusDays();

            int i = invAge0To90Days.compareTo(BigDecimal.ZERO); //(r==1) 左边大于右边
            int i1 = invAge91To180Days.compareTo(BigDecimal.ZERO);
            int i2 = invAge181To270Days.compareTo(BigDecimal.ZERO);
            int i3 = invAge271To365Days.compareTo(BigDecimal.ZERO);
            int i4 = invAge365PlusDays.compareTo(BigDecimal.ZERO);

            boolean b = i2 > 0 || i3 > 0 || i4 > 0;

            boolean c = i <= 0 && i1 <= 0;
            if (b && c) {
//            if (i <= 0 && i1 <= 0 && i2 > 0 && i3 > 0 && i4 > 0) {
                satisfiedConditionItems.add(agedItem);
                //仅库龄大于180天的商品 直接清仓
            } else {
                //其他状态库龄的商品
                notSatisfiedConditionItems.add(agedItem);
            }
        }

        List<AmazonInventoryAgedReportPO> calculateOnlyThan180DayAgedItemContent
                = calculateOnlyThan180DayAgedItemContent(satisfiedConditionItems);
//        amazonInventoryAgedReportDao.updateBySku(calculateOnlyThan180DayAgedItemContent,shopIdThreadLocal.get());
        amazonInventoryAgedReportDao.updateDataById(calculateOnlyThan180DayAgedItemContent, daoStockReportList);

        //is set id to zero
        List<AmazonInventoryAgedReportPO> calculateNotOnlyThan180DayAgedItemContent = calculateNotOnlyThan180DayAgedItemContent(notSatisfiedConditionItems);

        //非仅库龄大于180天的商品
//        Date date =new Date();
//        for (AmazonInventoryAgedReportPO po : calculateNotOnlyThan180DayAgedItemContent) {
//            po.setSnapshotDate(date);
//            po.setStartDate(date);
//        }

//        返回的就是余下的
        return this.countAgedItemReportComponent.cost(calculateNotOnlyThan180DayAgedItemContent);
    }

    /**
     * 仅库龄大于180天的有amount的商品
     *
     * @param pos
     * @return
     */
    private List<AmazonInventoryAgedReportPO> calculateOnlyThan180DayAgedItemContent(List<AmazonInventoryAgedReportPO> pos) {


//        List<AmazonInventoryAgedReportPO> calculateNextClearPoint =
//                CalculateContentUtils.calculateNextClearPoint(pos);
//
//        List<AmazonInventoryAgedReportPO> calculateTerminationDate =
//                CalculateContentUtils.calculateTerminationDate(calculateNextClearPoint);
//
//        List<AmazonInventoryAgedReportPO> calculatePlanStockToZeroDate =
//                CalculateContentUtils.calculatePlanStockToZeroDate(pos);
//
//        List<AmazonInventoryAgedReportPO> calculateSellOutDate =
//                CalculateContentUtils.calculateSellOutDate(calculatePlanStockToZeroDate);
//
//        List<AmazonInventoryAgedReportPO> calculateSellOutStatus
//                = CalculateContentUtils.calculateSellOutStatus(calculateSellOutDate);
//
//        List<AmazonInventoryAgedReportPO> calculateIsClearItem
//                = CalculateContentUtils.calculateIsClearItem(calculateSellOutStatus);


        //只有库龄大于180天的商品
        for (AmazonInventoryAgedReportPO po : pos) {
//            po.setStartDate(null);
//            po.setTerminationDate(null);
//            po.setNextClearingPoint(null);

            po.setClearanceItem(true);

//            po.setSellOutDate(null);
//            po.setSellOutStatus(null);
        }


        return pos;
    }




    /**
     * 单独抽为component
     * 非仅库龄大于180天的商品这个条件的商品
     *
     * @param pos
     * @return
     */
    private List<AmazonInventoryAgedReportPO> calculateNotOnlyThan180DayAgedItemContent(List<AmazonInventoryAgedReportPO> pos) {
        //记录日期为服务器的起始日期
        Date date = new Date();
//        for (AmazonInventoryAgedReportPO po : pos) {
//            po.setStartDate(date);
//        }
        return pos;
    }





    /**
     * 单独抽为component
     * 跟新日期是昨天的计算方式
     *
     * @param pos
     * @return
     */
    private List<AmazonInventoryAgedReportPO> calculateYesterdayUpdateContent(List<AmazonInventoryAgedReportPO> pos) {
//        Date date = new Date();
//        for (AmazonInventoryAgedReportPO directnessToDataBaseItem : pos) {
//            directnessToDataBaseItem.setStartDate(date);    //设置起始时间
//            directnessToDataBaseItem.setSyncLast(date); //设置更新时间
//        }
//        List<AmazonInventoryAgedReportPO> calculateNextClearPoint =
//                CalculateContentUtils.calculateNextClearPoint(pos);

//        List<AmazonInventoryAgedReportPO> calculateTerminationDate =
//                CalculateContentUtils.calculateTerminationDate(calculateNextClearPoint);

        List<AmazonInventoryAgedReportPO> calculatePlanStockToZeroDate =
                CalculateContentUtils.calculatePlanStockToZeroDate(pos);

        List<AmazonInventoryAgedReportPO> calculateSellOutDate =
                CalculateContentUtils.calculateSellOutDate(calculatePlanStockToZeroDate);

        List<AmazonInventoryAgedReportPO> calculateSellOutStatus
                = CalculateContentUtils.calculateSellOutStatus(calculateSellOutDate);

        List<AmazonInventoryAgedReportPO> calculateIsClearItem
                = CalculateContentUtils.calculateIsClearItem(calculateSellOutStatus);

        return calculateIsClearItem;
    }


}
