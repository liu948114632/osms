package com.itecheasy.core.task;

import com.itecheasy.common.asynemail.AsynEmailServiceImpl;
import com.itecheasy.common.util.CollectionUtils;
import com.itecheasy.common.util.DateUtils;
import com.itecheasy.common.util.Mail;
import com.itecheasy.core.fba.AmazonReportService;
import com.itecheasy.core.system.Shop;
import com.itecheasy.core.system.dao.ShopDao;
import com.itecheasy.osms.order.AmazonReportWebService;
import com.itecheasy.webservice.amazon.AmazonStockReportVO;
import com.itecheasy.webservice.amazon.RequestReportVO;
import com.itecheasy.webservice.client.AmazonClient;
import org.apache.log4j.Logger;
import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.*;
import java.util.*;

/**
 * @Auther: liteng
 * @Date: 2018/7/3 11:01
 * @Description: 定时任务，自动来跑亚马逊，获取报告，之后写入本地
 */
public class SyncAmozonStackReportTaskImpl implements SyncAmozonStackReportTask{

    private static Logger logger = Logger.getLogger(SyncAmozonStackReportTaskImpl.class.getName());

    private ShopDao shopDao;

    private AmazonReportService amazonReportService;

    public void setAmazonReportService(AmazonReportService amazonReportService) {
        this.amazonReportService = amazonReportService;
    }

    public void setShopDao(ShopDao shopDao) {
        this.shopDao = shopDao;
    }

    //用于多线程访问的shopList,当enableShops中没有了元素，今天就不会再跑了
    private List<Shop> enableShops;

    //0今天的还没有走，1今天的任务已经做完了
    private int lastOneFlag= 0 ;

    public  void initShopList(){
        logger.info("初始化要获取亚马逊报告的店铺");
        enableShops = shopDao.getEnableShops();

        for (Iterator<Shop> it=enableShops.iterator();it.hasNext();) {
            Shop sp = it.next();
            boolean isAmazonShop = sp.getName().startsWith("Amazon");
            if (!isAmazonShop){
                it.remove();
            }
        }

    }

    /**
     * 获取所有的商店report，多线程quartz
     */
    @Override
    public void syncAmozonStackReportTask() {
        logger.info("开始调用中间服务来获取亚马逊商品库存报告");
        //init shopList every day
        if(enableShops == null && lastOneFlag == 0){    //第一次时执行,今天的跑完了之后就把flag改为1，就不会再初始化了店铺了
            initShopList();
        }

        //访问亚马逊 全部
        if (enableShops!=null && enableShops.size()>0) {
            List<Shop> shopList = new ArrayList<Shop>();
            Shop shop = enableShops.get(0);
            shopList.add(shop);
            enableShops.remove(0);
            for(Iterator<Shop> it=enableShops.iterator();it.hasNext();){
                Shop sp = it.next();
                if(sp.getShopDevInfoId().equals(shop.getShopDevInfoId())){
                    shopList.add(sp);
                    it.remove();
                }
            }

            if (CollectionUtils.isNotEmpty(shopList)) {
                List<Integer> shopIds= new ArrayList<Integer>();
                for (Shop sh : shopList) {
                    logger.error("以下店铺将开始请求亚马逊"+shopIds);
                    //每次只访问一个shop
                    logger.error("以下店铺请求亚马逊获取报告完成"+shopIds);
                    shopIds.add(sh.getId());
                }
                amazonReportService.syncAmazonStockReportFromAmazon(shopList);
            }


             //拿完之后删除掉刚刚拿到的那个
            //今天的已经跑完了   停止的条件
            if(enableShops.size() == 0){
                lastOneFlag = 1;

            }
            logger.info("完成调用中间服务获取亚马逊商品库存报告");
        }
    }




    //每次自动任务就会访问同一个中间服务器的所有店铺
    public void syncAmazonStackReportTask3() {
        if(enableShops==null && lastOneFlag==0) {
            initShopList();
        }

        if (enableShops!=null && enableShops.size()>0) {
            List<Shop> shopList = new ArrayList<Shop>();
            Shop shop = enableShops.get(0);
            shopList.add(shop);
            enableShops.remove(0);
            for(Iterator<Shop> it=enableShops.iterator();it.hasNext();){
                Shop sp = it.next();
                if(sp.getShopDevInfoId().equals(shop.getShopDevInfoId())){
                    shopList.add(sp);
                    it.remove();
                }
            }
            if (CollectionUtils.isNotEmpty(shopList)) {
                List<Integer> shopIds= new ArrayList<Integer>();
                for (Shop sh : shopList) {
                    shopIds.add(sh.getId());

                }
                logger.error("以下店铺将开始请求亚马逊"+shopIds);
            }
            amazonReportService.syncAmazonStockReportFromAmazon(shopList);

        }

        if (enableShops !=null && enableShops.size() == 0){
            lastOneFlag = 1;
        }
    }

    /**
     * 用于重置lastOneFlag,就是判断今天是否已经跑过了一次亚马逊
     */
    @Override
    public void resetEverydaySync() {
        if (enableShops != null && enableShops.size()==0 && lastOneFlag == 1) {  //第二次和以后的重置，单独的自动任务来初始化店铺
            initShopList();
            logger.error("已经重置lastOneFlag，开始获取今天新的亚马逊stockReport");

            //其他的异常情况
        }else if(enableShops!=null && lastOneFlag != 1){
            logger.error("初始化错误，今天不能初始化并且访问亚马逊来获取报告，可能是昨天或者更早的报告没有完成");
        }else{
            logger.error("未知错误,不能初始化亚马逊自动任务来获取报告");
        }
    }

}
