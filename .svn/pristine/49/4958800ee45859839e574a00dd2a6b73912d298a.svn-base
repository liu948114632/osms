package com.itecheasy.core.fba.AgedItemReportCalculateUtil;

import com.itecheasy.common.util.DateUtils;
import com.itecheasy.common.util.HqlUtils;
import com.itecheasy.core.fba.dao.AmazonInventoryAgedReportDao;
import com.itecheasy.core.po.AmazonInventoryAgedReportPO;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class isYesterdayUpdateFilterComponent implements CountAgedItemReportComponent {

    private AmazonInventoryAgedReportDao amazonInventoryAgedReportDao;

    private Integer shopId;

    //历史表的Dao

    private CountAgedItemReportComponent countAgedItemReportComponent;

    public isYesterdayUpdateFilterComponent() {

    }

    public isYesterdayUpdateFilterComponent(CountAgedItemReportComponent component) {
        this.countAgedItemReportComponent = component;
    }

    public isYesterdayUpdateFilterComponent(CountAgedItemReportComponent component,Integer shopId) {
        this.shopId=shopId;
        this.countAgedItemReportComponent = component;
    }

    public void setAmazonInventoryAgedReportDao(AmazonInventoryAgedReportDao amazonInventoryAgedReportDao) {
        this.amazonInventoryAgedReportDao = amazonInventoryAgedReportDao;
    }

    /**
     * a.after(b)返回一个boolean，如果a的时间在b之后（不包括等于）返回true
     * b.before(a)返回一个boolean，如果b的时间在a之前（不包括等于）返回true
     * a.equals(b)返回一个boolean,如果a的时间和b相等返回true
     */

    /**
     * 更新日期不是昨天的直接修改,是昨天的则返回
     * @param items 库龄报告表中不存在的商品
     * @return
     *
     */
    @Override
    public List<AmazonInventoryAgedReportPO> cost(List<AmazonInventoryAgedReportPO> items) {
        //假如一定在库龄result表里面
        List<String> skus = new ArrayList<String>();
        for (AmazonInventoryAgedReportPO item : items) {
            skus.add(item.getSku());
        }

        String whereIn = HqlUtils.jointCriteriaString
                ("from AmazonInventoryAgedReportPO where sku ", skus);
        List<AmazonInventoryAgedReportPO> resultPos = amazonInventoryAgedReportDao.
                findListByHql(whereIn, new Object[]{});

        //更新日期是昨天的集合
        List<AmazonInventoryAgedReportPO> updateTimeYesterday = new ArrayList<AmazonInventoryAgedReportPO>();

        //更新日期不是昨天的集合
        List<AmazonInventoryAgedReportPO> notUpdateTimeYesterday = new ArrayList<AmazonInventoryAgedReportPO>();

        //查看更新日期是不是昨天
        for (AmazonInventoryAgedReportPO resultPo : resultPos) {
            //这里暂时这样
            Date toDayRealDate = DateUtils.getRealDate(new Date());
            Date DatebaseRealDate = DateUtils.getRealDate(resultPo.getSyncLast());
            Integer is = toDayRealDate.compareTo(DatebaseRealDate);
            if (is.equals(0)){  //修改记录
                //这些值不变 起始日期,终止日期,下一清算点
                //other column data update and recalculate
                updateTimeYesterday.add(resultPo);
            }else{
                //超过了一天 不是昨天
                //说明这个sku中途已经卖完了
                notUpdateTimeYesterday.add(resultPo);
            }
        }

        List<AmazonInventoryAgedReportPO> amazonInventoryAgedReportPOS = calculateContent(notUpdateTimeYesterday);
        amazonInventoryAgedReportDao.addObject(amazonInventoryAgedReportPOS);

        //计算完成之后继续委托
        return this.countAgedItemReportComponent.cost(updateTimeYesterday);
    }

    /**
     *
     * @param pos
     * @return
     */
    private List<AmazonInventoryAgedReportPO> calculateContent(List<AmazonInventoryAgedReportPO> pos) {


        return null;
    }


}
