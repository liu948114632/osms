package com.itecheasy.core.fba.AgedItemReportCalculateUtil;

import com.itecheasy.core.fba.dao.AmazonInventoryAgedReportDao;
import com.itecheasy.core.po.AmazonInventoryAgedReportPO;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 *
 */
public class IsRequireClearanceAgedItemFilterComponent extends CountAgedItemReportComponent {

    private AmazonInventoryAgedReportDao amazonInventoryAgedReportDao;

    //库龄历史表

    private String shopId;


    public IsRequireClearanceAgedItemFilterComponent() {
    }

    private CountAgedItemReportComponent countAgedItemReportComponent;

    public void setAmazonInventoryAgedReportDao(AmazonInventoryAgedReportDao amazonInventoryAgedReportDao) {
        this.amazonInventoryAgedReportDao = amazonInventoryAgedReportDao;
    }

    public IsRequireClearanceAgedItemFilterComponent(CountAgedItemReportComponent component) {
        this.countAgedItemReportComponent = component;
    }

    public IsRequireClearanceAgedItemFilterComponent(CountAgedItemReportComponent component,String shopId) {
        this.countAgedItemReportComponent = component;
    }

    /**
     * 判断是否需要清仓   不同的条件不同的方法
     *  step5
     * @param items
     * @return
     */
    @Override
    public List<AmazonInventoryAgedReportPO> cost(List<AmazonInventoryAgedReportPO> items) {
        //自己的逻辑   计算完成之后继续委托

        List<AmazonInventoryAgedReportPO> onlyThan180DayAgedItemList = new ArrayList<AmazonInventoryAgedReportPO>();

        List<AmazonInventoryAgedReportPO> onlyNotThan180DayAgedItemList = new ArrayList<AmazonInventoryAgedReportPO>();

        for (AmazonInventoryAgedReportPO agedItem : items) {
            BigDecimal invAge0To90Days = agedItem.getInvAge0To90Days();
            BigDecimal invAge91To180Days = agedItem.getInvAge91To180Days();
            BigDecimal invAge181To270Days = agedItem.getInvAge181To270Days();
            BigDecimal invAge271To365Days = agedItem.getInvAge271To365Days();
            BigDecimal invAge365PlusDays = agedItem.getInvAge365PlusDays();

            int i = invAge0To90Days.compareTo(BigDecimal.ZERO); //(r==1) //左边大于右边
            int i1 = invAge91To180Days.compareTo(BigDecimal.ZERO);
            int i2 = invAge181To270Days.compareTo(BigDecimal.ZERO);
            int i3 = invAge271To365Days.compareTo(BigDecimal.ZERO);
            int i4 = invAge365PlusDays.compareTo(BigDecimal.ZERO);

            //if
            Date terminationDate = agedItem.getTerminationDate();
            Date planStockToZeroDate = agedItem.getPlanStockToZeroDate();
            int terminationComparePlanStockToZero = terminationDate.compareTo(planStockToZeroDate);

            //else if
            boolean onlyExist180DayAgedItemFlag = i < 0 && i1 < 0 && i2 > 0 && i3 > 0 && i4 > 0;

            if (i1 > 0 && terminationComparePlanStockToZero<0) {
                onlyThan180DayAgedItemList.add(agedItem);
            }else if (onlyExist180DayAgedItemFlag){
                onlyThan180DayAgedItemList.add(agedItem);
            }
        }



//        返回的是
        return this.countAgedItemReportComponent.cost(items);
    }


    /**
     * 有两种情况：
     * 一：同时满足下面两个条件的商品，需清仓
     * 1. 存在库龄 90-->180 之间的商品
     * 2. 终止日期 小于 预计库存清0日期
     *
     * 二：仅存在库龄大于180天
     * 1 .给SKU打上清仓标签。
     * 1.	起始日期，终止日期，下一清算点空着。
     * （为了知道新加入大于90天库龄的商品，起始日期是多少。才这么考虑）
     * 2.	预计库存清0日期 正常计算。参照下下讲解
     *  （日期比较远，一看就卖不完）
     *
     *  计算需要清仓的
     */
    private List<AmazonInventoryAgedReportPO> calculateIsRequireClearanceAgedItemContent(List<AmazonInventoryAgedReportPO> pos) {
        Date date = new Date();
        for (AmazonInventoryAgedReportPO directnessToDataBaseItem : pos) {
//            directnessToDataBaseItem.setStartDate(date);    //设置起始时间
            directnessToDataBaseItem.setSyncLast(date); //设置更新时间

            directnessToDataBaseItem.setStartDate(null);
            directnessToDataBaseItem.setTerminationDate(null);
            directnessToDataBaseItem.setNextClearingPoint(null);
        }
//        List<AmazonInventoryAgedReportPO> calculateNextClearPoint =
//                CalculateContentUtils.calculateNextClearPoint(pos);

//        List<AmazonInventoryAgedReportPO> calculateTerminationDate =
//                CalculateContentUtils.calculateTerminationDate(calculateNextClearPoint);

        List<AmazonInventoryAgedReportPO> calculatePlanStockToZeroDate =
                CalculateContentUtils.calculatePlanStockToZeroDate(pos);

        List<AmazonInventoryAgedReportPO> calculateSellOutDate =
                CalculateContentUtils.calculateSellOutDate(calculatePlanStockToZeroDate);

        List<AmazonInventoryAgedReportPO> calculateSellOutStatus
                = CalculateContentUtils.calculateSellOutStatus(calculateSellOutDate);

        return calculateSellOutStatus;
    }


}
